// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CuratedRating.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Videa.CuratedRatingNS.Service.Proto.Types {
  public static partial class CuratedRatingService
  {
    static readonly string __ServiceName = "CuratedRatingService";

    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteRequest> __Marshaller_CuratedRatingDeleteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteResponse> __Marshaller_CuratedRatingDeleteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteRequest> __Marshaller_RatingTypeDeleteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteResponse> __Marshaller_RatingTypeDeleteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteRequest> __Marshaller_CurationStatusDeleteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteResponse> __Marshaller_CurationStatusDeleteResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateRequest> __Marshaller_CuratedRatingAddUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateResponse> __Marshaller_CuratedRatingAddUpdateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateRequest> __Marshaller_RatingTypeAddUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateResponse> __Marshaller_RatingTypeAddUpdateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateRequest> __Marshaller_CurationStatusAddUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateResponse> __Marshaller_CurationStatusAddUpdateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsRequest> __Marshaller_GetConfirmedRatingsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsResponse> __Marshaller_GetConfirmedRatingsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreRequest> __Marshaller_BulkStoreRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreResponse> __Marshaller_BulkStoreResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteResponse> __Method_CuratedRatingDelete = new grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CuratedRatingDelete",
        __Marshaller_CuratedRatingDeleteRequest,
        __Marshaller_CuratedRatingDeleteResponse);

    static readonly grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteResponse> __Method_RatingTypeDelete = new grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RatingTypeDelete",
        __Marshaller_RatingTypeDeleteRequest,
        __Marshaller_RatingTypeDeleteResponse);

    static readonly grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteResponse> __Method_CurationStatusDelete = new grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CurationStatusDelete",
        __Marshaller_CurationStatusDeleteRequest,
        __Marshaller_CurationStatusDeleteResponse);

    static readonly grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateResponse> __Method_CuratedRatingAddUpdate = new grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CuratedRatingAddUpdate",
        __Marshaller_CuratedRatingAddUpdateRequest,
        __Marshaller_CuratedRatingAddUpdateResponse);

    static readonly grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateResponse> __Method_RatingTypeAddUpdate = new grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RatingTypeAddUpdate",
        __Marshaller_RatingTypeAddUpdateRequest,
        __Marshaller_RatingTypeAddUpdateResponse);

    static readonly grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateResponse> __Method_CurationStatusAddUpdate = new grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CurationStatusAddUpdate",
        __Marshaller_CurationStatusAddUpdateRequest,
        __Marshaller_CurationStatusAddUpdateResponse);

    static readonly grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsResponse> __Method_GetConfirmedRatings = new grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConfirmedRatings",
        __Marshaller_GetConfirmedRatingsRequest,
        __Marshaller_GetConfirmedRatingsResponse);

    static readonly grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreResponse> __Method_BulkStore = new grpc::Method<global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreRequest, global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BulkStore",
        __Marshaller_BulkStoreRequest,
        __Marshaller_BulkStoreResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CuratedRatingService</summary>
    public abstract partial class CuratedRatingServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteResponse> CuratedRatingDelete(global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteResponse> RatingTypeDelete(global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteResponse> CurationStatusDelete(global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateResponse> CuratedRatingAddUpdate(global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateResponse> RatingTypeAddUpdate(global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateResponse> CurationStatusAddUpdate(global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsResponse> GetConfirmedRatings(global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreResponse> BulkStore(global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CuratedRatingService</summary>
    public partial class CuratedRatingServiceClient : grpc::ClientBase<CuratedRatingServiceClient>
    {
      /// <summary>Creates a new client for CuratedRatingService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CuratedRatingServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CuratedRatingService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CuratedRatingServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CuratedRatingServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CuratedRatingServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteResponse CuratedRatingDelete(global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CuratedRatingDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteResponse CuratedRatingDelete(global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CuratedRatingDelete, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteResponse> CuratedRatingDeleteAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CuratedRatingDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteResponse> CuratedRatingDeleteAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CuratedRatingDelete, null, options, request);
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteResponse RatingTypeDelete(global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RatingTypeDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteResponse RatingTypeDelete(global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RatingTypeDelete, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteResponse> RatingTypeDeleteAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RatingTypeDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteResponse> RatingTypeDeleteAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RatingTypeDelete, null, options, request);
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteResponse CurationStatusDelete(global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CurationStatusDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteResponse CurationStatusDelete(global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CurationStatusDelete, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteResponse> CurationStatusDeleteAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CurationStatusDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteResponse> CurationStatusDeleteAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CurationStatusDelete, null, options, request);
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateResponse CuratedRatingAddUpdate(global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CuratedRatingAddUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateResponse CuratedRatingAddUpdate(global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CuratedRatingAddUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateResponse> CuratedRatingAddUpdateAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CuratedRatingAddUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateResponse> CuratedRatingAddUpdateAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.CuratedRatingAddUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CuratedRatingAddUpdate, null, options, request);
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateResponse RatingTypeAddUpdate(global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RatingTypeAddUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateResponse RatingTypeAddUpdate(global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RatingTypeAddUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateResponse> RatingTypeAddUpdateAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RatingTypeAddUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateResponse> RatingTypeAddUpdateAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.RatingTypeAddUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RatingTypeAddUpdate, null, options, request);
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateResponse CurationStatusAddUpdate(global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CurationStatusAddUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateResponse CurationStatusAddUpdate(global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CurationStatusAddUpdate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateResponse> CurationStatusAddUpdateAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CurationStatusAddUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateResponse> CurationStatusAddUpdateAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.CurationStatusAddUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CurationStatusAddUpdate, null, options, request);
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsResponse GetConfirmedRatings(global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetConfirmedRatings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsResponse GetConfirmedRatings(global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConfirmedRatings, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsResponse> GetConfirmedRatingsAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetConfirmedRatingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsResponse> GetConfirmedRatingsAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.GetConfirmedRatingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConfirmedRatings, null, options, request);
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreResponse BulkStore(global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BulkStore(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreResponse BulkStore(global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BulkStore, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreResponse> BulkStoreAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BulkStoreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreResponse> BulkStoreAsync(global::Videa.CuratedRatingNS.Service.Proto.Types.BulkStoreRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BulkStore, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CuratedRatingServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CuratedRatingServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CuratedRatingServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CuratedRatingDelete, serviceImpl.CuratedRatingDelete)
          .AddMethod(__Method_RatingTypeDelete, serviceImpl.RatingTypeDelete)
          .AddMethod(__Method_CurationStatusDelete, serviceImpl.CurationStatusDelete)
          .AddMethod(__Method_CuratedRatingAddUpdate, serviceImpl.CuratedRatingAddUpdate)
          .AddMethod(__Method_RatingTypeAddUpdate, serviceImpl.RatingTypeAddUpdate)
          .AddMethod(__Method_CurationStatusAddUpdate, serviceImpl.CurationStatusAddUpdate)
          .AddMethod(__Method_GetConfirmedRatings, serviceImpl.GetConfirmedRatings)
          .AddMethod(__Method_BulkStore, serviceImpl.BulkStore).Build();
    }

  }
}
#endregion
