// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SellableInventoryMart.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Videa.SellableInventoryMartNS.Service.Proto.Types {

  /// <summary>Holder for reflection information generated from SellableInventoryMart.proto</summary>
  public static partial class SellableInventoryMartReflection {

    #region Descriptor
    /// <summary>File descriptor for SellableInventoryMart.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SellableInventoryMartReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtTZWxsYWJsZUludmVudG9yeU1hcnQucHJvdG8aH2dvb2dsZS9wcm90b2J1",
            "Zi90aW1lc3RhbXAucHJvdG8aHmdvb2dsZS9wcm90b2J1Zi9kdXJhdGlvbi5w",
            "cm90byLSAQoMU2VsbGluZ1RpdGxlEhsKE1NlbGxpbmdUaXRsZUhhc2hLZXkY",
            "ASABKAkSFwoPU2VsbGluZ1RpdGxlU3FuGAIgASgFEhgKEFNlbGxpbmdUaXRs",
            "ZU5hbWUYAyABKAkSOQoVU2VsbGluZ1RpdGxlU3RhcnREYXRlGAQgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI3ChNTZWxsaW5nVGl0bGVFbmRE",
            "YXRlGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCJmCgdTdGF0",
            "aW9uEhYKDlN0YXRpb25IYXNoS2V5GAEgASgJEhIKClN0YXRpb25TcW4YAiAB",
            "KAUSEwoLU3RhdGlvbk5hbWUYAyABKAkSGgoSU3RhdGlvbkNhbGxMZXR0ZXJz",
            "GAQgASgJIl4KDFN0YXRpb25Hcm91cBIbChNTdGF0aW9uR3JvdXBIYXNoS2V5",
            "GAEgASgJEhcKD1N0YXRpb25Hcm91cFNxbhgCIAEoBRIYChBTdGF0aW9uR3Jv",
            "dXBOYW1lGAMgASgJIroBCghSYXRlQ2FyZBIXCg9SYXRlQ2FyZEhhc2hLZXkY",
            "ASABKAkSEwoLUmF0ZUNhcmRTcW4YAiABKAUSFAoMUmF0ZUNhcmROYW1lGAMg",
            "ASgJEjUKEVJhdGVDYXJkU3RhcnREYXRlGAQgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLlRpbWVzdGFtcBIzCg9SYXRlQ2FyZEVuZERhdGUYBSABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wImoKD1JhdGVDYXJkRGF5cGFydBIeChZS",
            "YXRlQ2FyZERheXBhcnRIYXNoS2V5GAEgASgJEhoKElJhdGVDYXJkRGF5cGFy",
            "dFNxbhgCIAEoBRIbChNSYXRlQ2FyZERheXBhcnROYW1lGAMgASgJIl4KDFJh",
            "dGVDYXJkVHlwZRIbChNSYXRlQ2FyZFR5cGVIYXNoS2V5GAEgASgJEhcKD1Jh",
            "dGVDYXJkVHlwZVNxbhgCIAEoBRIYChBSYXRlQ2FyZFR5cGVOYW1lGAMgASgJ",
            "InYKFVNlbGxpbmdUaXRsZVRpbWVSYW5nZRIkChxTZWxsaW5nVGl0bGVUaW1l",
            "UmFuZ2VIYXNoS2V5GAEgASgJEhQKDFRpbWVSYW5nZVNxbhgCIAEoBRIhChlT",
            "ZWxsaW5nVGl0bGVUaW1lUmFuZ2VOYW1lGAMgASgJIuEBChZTZWxsaW5nVGl0",
            "bGVEYXlzT2ZXZWVrEiUKHVNlbGxpbmdUaXRsZURheXNPZldlZWtIYXNoS2V5",
            "GAEgASgJEiEKGVNlbGxpbmdUaXRsZURheXNPZldlZWtTcW4YAiABKAUSIgoa",
            "U2VsbGluZ1RpdGxlRGF5c09mV2Vla05hbWUYAyABKAkSCwoDTW9uGAQgASgI",
            "EgsKA1R1ZRgFIAEoCBILCgNXZWQYBiABKAgSCwoDVGh1GAcgASgIEgsKA0Zy",
            "aRgIIAEoCBILCgNTYXQYCSABKAgSCwoDU3VuGAogASgIIpQCChdTZWxsYWJs",
            "ZUludmVudG9yeVBlcmlvZBImCh5TZWxsYWJsZUludmVudG9yeVBlcmlvZEhh",
            "c2hLZXkYASABKAkSIgoaU2VsbGFibGVJbnZlbnRvcnlQZXJpb2RTcW4YAiAB",
            "KAUSIwobU2VsbGFibGVJbnZlbnRvcnlQZXJpb2ROYW1lGAMgASgJEkQKIFNl",
            "bGxhYmxlSW52ZW50b3J5UGVyaW9kU3RhcnREYXRlGAQgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBJCCh5TZWxsYWJsZUludmVudG9yeVBlcmlv",
            "ZEVuZERhdGUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIvAC",
            "ChFTZWxsYWJsZUludmVudG9yeRIgChhTZWxsYWJsZUludmVudG9yeUhhc2hL",
            "ZXkYASABKAkSHAoUU2VsbGFibGVJbnZlbnRvcnlTcW4YAiABKAUSFgoOU3Rh",
            "dGlvbkhhc2hLZXkYAyABKAkSGwoTU3RhdGlvbkdyb3VwSGFzaEtleRgEIAEo",
            "CRIXCg9SYXRlQ2FyZEhhc2hLZXkYBSABKAkSHgoWUmF0ZUNhcmREYXlwYXJ0",
            "SGFzaEtleRgGIAEoCRIbChNSYXRlQ2FyZFR5cGVIYXNoS2V5GAcgASgJEhsK",
            "E1NlbGxpbmdUaXRsZUhhc2hLZXkYCCABKAkSJQodU2VsbGluZ1RpdGxlRGF5",
            "c09mV2Vla0hhc2hLZXkYCSABKAkSJAocU2VsbGluZ1RpdGxlVGltZVJhbmdl",
            "SGFzaEtleRgKIAEoCRImCh5TZWxsYWJsZUludmVudG9yeVBlcmlvZEhhc2hL",
            "ZXkYCyABKAki/QIKFFNlbGxhYmxlSW52ZW50b3J5RHRvEjkKFVNlbGxpbmdU",
            "aXRsZVN0YXJ0RGF0ZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASNwoTU2VsbGluZ1RpdGxlRW5kRGF0ZRgCIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5UaW1lc3RhbXASGAoQU2VsbGluZ1RpdGxlTmFtZRgDIAEoCRIbChNS",
            "YXRlQ2FyZERheXBhcnROYW1lGAQgASgJEiIKGlNlbGxpbmdUaXRsZURheXNP",
            "ZldlZWtOYW1lGAUgASgJEhgKEFJhdGVDYXJkVHlwZU5hbWUYBiABKAkSIAoY",
            "U2VsbGFibGVJbnZlbnRvcnlIYXNoS2V5GAcgASgJEhYKDlN0YXRpb25IYXNo",
            "S2V5GAggASgJEiUKHVNlbGxpbmdUaXRsZURheXNPZldlZWtIYXNoS2V5GAkg",
            "ASgJEhsKE1JhdGVDYXJkVHlwZUhhc2hLZXkYCiABKAkiOAoZU2VsbGluZ1Rp",
            "dGxlRGVsZXRlUmVxdWVzdBIbChNTZWxsaW5nVGl0bGVIYXNoS2V5GAEgASgJ",
            "IhwKGlNlbGxpbmdUaXRsZURlbGV0ZVJlc3BvbnNlIi4KFFN0YXRpb25EZWxl",
            "dGVSZXF1ZXN0EhYKDlN0YXRpb25IYXNoS2V5GAEgASgJIhcKFVN0YXRpb25E",
            "ZWxldGVSZXNwb25zZSI4ChlTdGF0aW9uR3JvdXBEZWxldGVSZXF1ZXN0EhsK",
            "E1N0YXRpb25Hcm91cEhhc2hLZXkYASABKAkiHAoaU3RhdGlvbkdyb3VwRGVs",
            "ZXRlUmVzcG9uc2UiMAoVUmF0ZUNhcmREZWxldGVSZXF1ZXN0EhcKD1JhdGVD",
            "YXJkSGFzaEtleRgBIAEoCSIYChZSYXRlQ2FyZERlbGV0ZVJlc3BvbnNlIj4K",
            "HFJhdGVDYXJkRGF5cGFydERlbGV0ZVJlcXVlc3QSHgoWUmF0ZUNhcmREYXlw",
            "YXJ0SGFzaEtleRgBIAEoCSIfCh1SYXRlQ2FyZERheXBhcnREZWxldGVSZXNw",
            "b25zZSI4ChlSYXRlQ2FyZFR5cGVEZWxldGVSZXF1ZXN0EhsKE1JhdGVDYXJk",
            "VHlwZUhhc2hLZXkYASABKAkiHAoaUmF0ZUNhcmRUeXBlRGVsZXRlUmVzcG9u",
            "c2UiSgoiU2VsbGluZ1RpdGxlVGltZVJhbmdlRGVsZXRlUmVxdWVzdBIkChxT",
            "ZWxsaW5nVGl0bGVUaW1lUmFuZ2VIYXNoS2V5GAEgASgJIiUKI1NlbGxpbmdU",
            "aXRsZVRpbWVSYW5nZURlbGV0ZVJlc3BvbnNlIkwKI1NlbGxpbmdUaXRsZURh",
            "eXNPZldlZWtEZWxldGVSZXF1ZXN0EiUKHVNlbGxpbmdUaXRsZURheXNPZldl",
            "ZWtIYXNoS2V5GAEgASgJIiYKJFNlbGxpbmdUaXRsZURheXNPZldlZWtEZWxl",
            "dGVSZXNwb25zZSJOCiRTZWxsYWJsZUludmVudG9yeVBlcmlvZERlbGV0ZVJl",
            "cXVlc3QSJgoeU2VsbGFibGVJbnZlbnRvcnlQZXJpb2RIYXNoS2V5GAEgASgJ",
            "IicKJVNlbGxhYmxlSW52ZW50b3J5UGVyaW9kRGVsZXRlUmVzcG9uc2UiQgoe",
            "U2VsbGFibGVJbnZlbnRvcnlEZWxldGVSZXF1ZXN0EiAKGFNlbGxhYmxlSW52",
            "ZW50b3J5SGFzaEtleRgBIAEoCSIhCh9TZWxsYWJsZUludmVudG9yeURlbGV0",
            "ZVJlc3BvbnNlIkMKHFNlbGxpbmdUaXRsZUFkZFVwZGF0ZVJlcXVlc3QSIwoM",
            "U2VsbGluZ1RpdGxlGAEgASgLMg0uU2VsbGluZ1RpdGxlIh8KHVNlbGxpbmdU",
            "aXRsZUFkZFVwZGF0ZVJlc3BvbnNlIjQKF1N0YXRpb25BZGRVcGRhdGVSZXF1",
            "ZXN0EhkKB1N0YXRpb24YASABKAsyCC5TdGF0aW9uIhoKGFN0YXRpb25BZGRV",
            "cGRhdGVSZXNwb25zZSJDChxTdGF0aW9uR3JvdXBBZGRVcGRhdGVSZXF1ZXN0",
            "EiMKDFN0YXRpb25Hcm91cBgBIAEoCzINLlN0YXRpb25Hcm91cCIfCh1TdGF0",
            "aW9uR3JvdXBBZGRVcGRhdGVSZXNwb25zZSI3ChhSYXRlQ2FyZEFkZFVwZGF0",
            "ZVJlcXVlc3QSGwoIUmF0ZUNhcmQYASABKAsyCS5SYXRlQ2FyZCIbChlSYXRl",
            "Q2FyZEFkZFVwZGF0ZVJlc3BvbnNlIkwKH1JhdGVDYXJkRGF5cGFydEFkZFVw",
            "ZGF0ZVJlcXVlc3QSKQoPUmF0ZUNhcmREYXlwYXJ0GAEgASgLMhAuUmF0ZUNh",
            "cmREYXlwYXJ0IiIKIFJhdGVDYXJkRGF5cGFydEFkZFVwZGF0ZVJlc3BvbnNl",
            "IkMKHFJhdGVDYXJkVHlwZUFkZFVwZGF0ZVJlcXVlc3QSIwoMUmF0ZUNhcmRU",
            "eXBlGAEgASgLMg0uUmF0ZUNhcmRUeXBlIh8KHVJhdGVDYXJkVHlwZUFkZFVw",
            "ZGF0ZVJlc3BvbnNlIl4KJVNlbGxpbmdUaXRsZVRpbWVSYW5nZUFkZFVwZGF0",
            "ZVJlcXVlc3QSNQoVU2VsbGluZ1RpdGxlVGltZVJhbmdlGAEgASgLMhYuU2Vs",
            "bGluZ1RpdGxlVGltZVJhbmdlIigKJlNlbGxpbmdUaXRsZVRpbWVSYW5nZUFk",
            "ZFVwZGF0ZVJlc3BvbnNlImEKJlNlbGxpbmdUaXRsZURheXNPZldlZWtBZGRV",
            "cGRhdGVSZXF1ZXN0EjcKFlNlbGxpbmdUaXRsZURheXNPZldlZWsYASABKAsy",
            "Fy5TZWxsaW5nVGl0bGVEYXlzT2ZXZWVrIikKJ1NlbGxpbmdUaXRsZURheXNP",
            "ZldlZWtBZGRVcGRhdGVSZXNwb25zZSJkCidTZWxsYWJsZUludmVudG9yeVBl",
            "cmlvZEFkZFVwZGF0ZVJlcXVlc3QSOQoXU2VsbGFibGVJbnZlbnRvcnlQZXJp",
            "b2QYASABKAsyGC5TZWxsYWJsZUludmVudG9yeVBlcmlvZCIqCihTZWxsYWJs",
            "ZUludmVudG9yeVBlcmlvZEFkZFVwZGF0ZVJlc3BvbnNlIlIKIVNlbGxhYmxl",
            "SW52ZW50b3J5QWRkVXBkYXRlUmVxdWVzdBItChFTZWxsYWJsZUludmVudG9y",
            "eRgBIAEoCzISLlNlbGxhYmxlSW52ZW50b3J5IiQKIlNlbGxhYmxlSW52ZW50",
            "b3J5QWRkVXBkYXRlUmVzcG9uc2UiNgocR2V0UmF0ZUNhcmRzQnlTdGF0aW9u",
            "UmVxdWVzdBIWCg5TdGF0aW9uSGFzaEtleRgBIAEoCSI8Ch1HZXRSYXRlQ2Fy",
            "ZHNCeVN0YXRpb25SZXNwb25zZRIbCghSYXRlQ2FyZBgBIAMoCzIJLlJhdGVD",
            "YXJkInwKHkdldFJhdGVDYXJkc0J5RGF0ZVJhbmdlUmVxdWVzdBItCglTdGFy",
            "dERhdGUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEisKB0Vu",
            "ZERhdGUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIj4KH0dl",
            "dFJhdGVDYXJkc0J5RGF0ZVJhbmdlUmVzcG9uc2USGwoIUmF0ZUNhcmQYASAD",
            "KAsyCS5SYXRlQ2FyZCKiAQocR2V0Q29uZmlybWVkSW52ZW50b3J5UmVxdWVz",
            "dBITCgtTdGF0aW9uTGlzdBgBIAEoCRIbChNSYXRlQ2FyZFR5cGVIYXNoS2V5",
            "GAIgASgJEhsKE1JhdGVDYXJkRGF5cGFydExpc3QYAyABKAkSGAoQU2VsbGlu",
            "Z1RpdGxlTGlzdBgEIAEoCRIZChFCcm9hZGNhc3RXZWVrTGlzdBgFIAEoCSJU",
            "Ch1HZXRDb25maXJtZWRJbnZlbnRvcnlSZXNwb25zZRIzChRTZWxsYWJsZUlu",
            "dmVudG9yeUR0bxgBIAMoCzIVLlNlbGxhYmxlSW52ZW50b3J5RHRvIvMDChBC",
            "dWxrU3RvcmVSZXF1ZXN0EiMKDFNlbGxpbmdUaXRsZRgBIAMoCzINLlNlbGxp",
            "bmdUaXRsZRIZCgdTdGF0aW9uGAIgAygLMgguU3RhdGlvbhIjCgxTdGF0aW9u",
            "R3JvdXAYAyADKAsyDS5TdGF0aW9uR3JvdXASGwoIUmF0ZUNhcmQYBCADKAsy",
            "CS5SYXRlQ2FyZBIpCg9SYXRlQ2FyZERheXBhcnQYBSADKAsyEC5SYXRlQ2Fy",
            "ZERheXBhcnQSIwoMUmF0ZUNhcmRUeXBlGAYgAygLMg0uUmF0ZUNhcmRUeXBl",
            "EjUKFVNlbGxpbmdUaXRsZVRpbWVSYW5nZRgHIAMoCzIWLlNlbGxpbmdUaXRs",
            "ZVRpbWVSYW5nZRI3ChZTZWxsaW5nVGl0bGVEYXlzT2ZXZWVrGAggAygLMhcu",
            "U2VsbGluZ1RpdGxlRGF5c09mV2VlaxI5ChdTZWxsYWJsZUludmVudG9yeVBl",
            "cmlvZBgJIAMoCzIYLlNlbGxhYmxlSW52ZW50b3J5UGVyaW9kEi0KEVNlbGxh",
            "YmxlSW52ZW50b3J5GAogAygLMhIuU2VsbGFibGVJbnZlbnRvcnkSMwoUU2Vs",
            "bGFibGVJbnZlbnRvcnlEdG8YCyADKAsyFS5TZWxsYWJsZUludmVudG9yeUR0",
            "byITChFCdWxrU3RvcmVSZXNwb25zZTLEEQocU2VsbGFibGVJbnZlbnRvcnlN",
            "YXJ0U2VydmljZRJPChJTZWxsaW5nVGl0bGVEZWxldGUSGi5TZWxsaW5nVGl0",
            "bGVEZWxldGVSZXF1ZXN0GhsuU2VsbGluZ1RpdGxlRGVsZXRlUmVzcG9uc2Ui",
            "ABJACg1TdGF0aW9uRGVsZXRlEhUuU3RhdGlvbkRlbGV0ZVJlcXVlc3QaFi5T",
            "dGF0aW9uRGVsZXRlUmVzcG9uc2UiABJPChJTdGF0aW9uR3JvdXBEZWxldGUS",
            "Gi5TdGF0aW9uR3JvdXBEZWxldGVSZXF1ZXN0GhsuU3RhdGlvbkdyb3VwRGVs",
            "ZXRlUmVzcG9uc2UiABJDCg5SYXRlQ2FyZERlbGV0ZRIWLlJhdGVDYXJkRGVs",
            "ZXRlUmVxdWVzdBoXLlJhdGVDYXJkRGVsZXRlUmVzcG9uc2UiABJYChVSYXRl",
            "Q2FyZERheXBhcnREZWxldGUSHS5SYXRlQ2FyZERheXBhcnREZWxldGVSZXF1",
            "ZXN0Gh4uUmF0ZUNhcmREYXlwYXJ0RGVsZXRlUmVzcG9uc2UiABJPChJSYXRl",
            "Q2FyZFR5cGVEZWxldGUSGi5SYXRlQ2FyZFR5cGVEZWxldGVSZXF1ZXN0Ghsu",
            "UmF0ZUNhcmRUeXBlRGVsZXRlUmVzcG9uc2UiABJqChtTZWxsaW5nVGl0bGVU",
            "aW1lUmFuZ2VEZWxldGUSIy5TZWxsaW5nVGl0bGVUaW1lUmFuZ2VEZWxldGVS",
            "ZXF1ZXN0GiQuU2VsbGluZ1RpdGxlVGltZVJhbmdlRGVsZXRlUmVzcG9uc2Ui",
            "ABJtChxTZWxsaW5nVGl0bGVEYXlzT2ZXZWVrRGVsZXRlEiQuU2VsbGluZ1Rp",
            "dGxlRGF5c09mV2Vla0RlbGV0ZVJlcXVlc3QaJS5TZWxsaW5nVGl0bGVEYXlz",
            "T2ZXZWVrRGVsZXRlUmVzcG9uc2UiABJwCh1TZWxsYWJsZUludmVudG9yeVBl",
            "cmlvZERlbGV0ZRIlLlNlbGxhYmxlSW52ZW50b3J5UGVyaW9kRGVsZXRlUmVx",
            "dWVzdBomLlNlbGxhYmxlSW52ZW50b3J5UGVyaW9kRGVsZXRlUmVzcG9uc2Ui",
            "ABJeChdTZWxsYWJsZUludmVudG9yeURlbGV0ZRIfLlNlbGxhYmxlSW52ZW50",
            "b3J5RGVsZXRlUmVxdWVzdBogLlNlbGxhYmxlSW52ZW50b3J5RGVsZXRlUmVz",
            "cG9uc2UiABJYChVTZWxsaW5nVGl0bGVBZGRVcGRhdGUSHS5TZWxsaW5nVGl0",
            "bGVBZGRVcGRhdGVSZXF1ZXN0Gh4uU2VsbGluZ1RpdGxlQWRkVXBkYXRlUmVz",
            "cG9uc2UiABJJChBTdGF0aW9uQWRkVXBkYXRlEhguU3RhdGlvbkFkZFVwZGF0",
            "ZVJlcXVlc3QaGS5TdGF0aW9uQWRkVXBkYXRlUmVzcG9uc2UiABJYChVTdGF0",
            "aW9uR3JvdXBBZGRVcGRhdGUSHS5TdGF0aW9uR3JvdXBBZGRVcGRhdGVSZXF1",
            "ZXN0Gh4uU3RhdGlvbkdyb3VwQWRkVXBkYXRlUmVzcG9uc2UiABJMChFSYXRl",
            "Q2FyZEFkZFVwZGF0ZRIZLlJhdGVDYXJkQWRkVXBkYXRlUmVxdWVzdBoaLlJh",
            "dGVDYXJkQWRkVXBkYXRlUmVzcG9uc2UiABJhChhSYXRlQ2FyZERheXBhcnRB",
            "ZGRVcGRhdGUSIC5SYXRlQ2FyZERheXBhcnRBZGRVcGRhdGVSZXF1ZXN0GiEu",
            "UmF0ZUNhcmREYXlwYXJ0QWRkVXBkYXRlUmVzcG9uc2UiABJYChVSYXRlQ2Fy",
            "ZFR5cGVBZGRVcGRhdGUSHS5SYXRlQ2FyZFR5cGVBZGRVcGRhdGVSZXF1ZXN0",
            "Gh4uUmF0ZUNhcmRUeXBlQWRkVXBkYXRlUmVzcG9uc2UiABJzCh5TZWxsaW5n",
            "VGl0bGVUaW1lUmFuZ2VBZGRVcGRhdGUSJi5TZWxsaW5nVGl0bGVUaW1lUmFu",
            "Z2VBZGRVcGRhdGVSZXF1ZXN0GicuU2VsbGluZ1RpdGxlVGltZVJhbmdlQWRk",
            "VXBkYXRlUmVzcG9uc2UiABJ2Ch9TZWxsaW5nVGl0bGVEYXlzT2ZXZWVrQWRk",
            "VXBkYXRlEicuU2VsbGluZ1RpdGxlRGF5c09mV2Vla0FkZFVwZGF0ZVJlcXVl",
            "c3QaKC5TZWxsaW5nVGl0bGVEYXlzT2ZXZWVrQWRkVXBkYXRlUmVzcG9uc2Ui",
            "ABJ5CiBTZWxsYWJsZUludmVudG9yeVBlcmlvZEFkZFVwZGF0ZRIoLlNlbGxh",
            "YmxlSW52ZW50b3J5UGVyaW9kQWRkVXBkYXRlUmVxdWVzdBopLlNlbGxhYmxl",
            "SW52ZW50b3J5UGVyaW9kQWRkVXBkYXRlUmVzcG9uc2UiABJnChpTZWxsYWJs",
            "ZUludmVudG9yeUFkZFVwZGF0ZRIiLlNlbGxhYmxlSW52ZW50b3J5QWRkVXBk",
            "YXRlUmVxdWVzdBojLlNlbGxhYmxlSW52ZW50b3J5QWRkVXBkYXRlUmVzcG9u",
            "c2UiABJYChVHZXRSYXRlQ2FyZHNCeVN0YXRpb24SHS5HZXRSYXRlQ2FyZHNC",
            "eVN0YXRpb25SZXF1ZXN0Gh4uR2V0UmF0ZUNhcmRzQnlTdGF0aW9uUmVzcG9u",
            "c2UiABJeChdHZXRSYXRlQ2FyZHNCeURhdGVSYW5nZRIfLkdldFJhdGVDYXJk",
            "c0J5RGF0ZVJhbmdlUmVxdWVzdBogLkdldFJhdGVDYXJkc0J5RGF0ZVJhbmdl",
            "UmVzcG9uc2UiABJYChVHZXRDb25maXJtZWRJbnZlbnRvcnkSHS5HZXRDb25m",
            "aXJtZWRJbnZlbnRvcnlSZXF1ZXN0Gh4uR2V0Q29uZmlybWVkSW52ZW50b3J5",
            "UmVzcG9uc2UiABI0CglCdWxrU3RvcmUSES5CdWxrU3RvcmVSZXF1ZXN0GhIu",
            "QnVsa1N0b3JlUmVzcG9uc2UiAEI0qgIxVmlkZWEuU2VsbGFibGVJbnZlbnRv",
            "cnlNYXJ0TlMuU2VydmljZS5Qcm90by5UeXBlc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitle), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitle.Parser, new[]{ "SellingTitleHashKey", "SellingTitleSqn", "SellingTitleName", "SellingTitleStartDate", "SellingTitleEndDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.Station), global::Videa.SellableInventoryMartNS.Service.Proto.Types.Station.Parser, new[]{ "StationHashKey", "StationSqn", "StationName", "StationCallLetters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroup), global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroup.Parser, new[]{ "StationGroupHashKey", "StationGroupSqn", "StationGroupName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard.Parser, new[]{ "RateCardHashKey", "RateCardSqn", "RateCardName", "RateCardStartDate", "RateCardEndDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypart), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypart.Parser, new[]{ "RateCardDaypartHashKey", "RateCardDaypartSqn", "RateCardDaypartName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardType), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardType.Parser, new[]{ "RateCardTypeHashKey", "RateCardTypeSqn", "RateCardTypeName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRange), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRange.Parser, new[]{ "SellingTitleTimeRangeHashKey", "TimeRangeSqn", "SellingTitleTimeRangeName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeek), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeek.Parser, new[]{ "SellingTitleDaysOfWeekHashKey", "SellingTitleDaysOfWeekSqn", "SellingTitleDaysOfWeekName", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriod), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriod.Parser, new[]{ "SellableInventoryPeriodHashKey", "SellableInventoryPeriodSqn", "SellableInventoryPeriodName", "SellableInventoryPeriodStartDate", "SellableInventoryPeriodEndDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventory), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventory.Parser, new[]{ "SellableInventoryHashKey", "SellableInventorySqn", "StationHashKey", "StationGroupHashKey", "RateCardHashKey", "RateCardDaypartHashKey", "RateCardTypeHashKey", "SellingTitleHashKey", "SellingTitleDaysOfWeekHashKey", "SellingTitleTimeRangeHashKey", "SellableInventoryPeriodHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDto), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDto.Parser, new[]{ "SellingTitleStartDate", "SellingTitleEndDate", "SellingTitleName", "RateCardDaypartName", "SellingTitleDaysOfWeekName", "RateCardTypeName", "SellableInventoryHashKey", "StationHashKey", "SellingTitleDaysOfWeekHashKey", "RateCardTypeHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDeleteRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDeleteRequest.Parser, new[]{ "SellingTitleHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDeleteResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDeleteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationDeleteRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationDeleteRequest.Parser, new[]{ "StationHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationDeleteResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationDeleteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroupDeleteRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroupDeleteRequest.Parser, new[]{ "StationGroupHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroupDeleteResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroupDeleteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDeleteRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDeleteRequest.Parser, new[]{ "RateCardHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDeleteResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDeleteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypartDeleteRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypartDeleteRequest.Parser, new[]{ "RateCardDaypartHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypartDeleteResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypartDeleteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardTypeDeleteRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardTypeDeleteRequest.Parser, new[]{ "RateCardTypeHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardTypeDeleteResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardTypeDeleteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRangeDeleteRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRangeDeleteRequest.Parser, new[]{ "SellingTitleTimeRangeHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRangeDeleteResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRangeDeleteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeekDeleteRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeekDeleteRequest.Parser, new[]{ "SellingTitleDaysOfWeekHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeekDeleteResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeekDeleteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriodDeleteRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriodDeleteRequest.Parser, new[]{ "SellableInventoryPeriodHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriodDeleteResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriodDeleteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDeleteRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDeleteRequest.Parser, new[]{ "SellableInventoryHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDeleteResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDeleteResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleAddUpdateRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleAddUpdateRequest.Parser, new[]{ "SellingTitle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleAddUpdateResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleAddUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationAddUpdateRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationAddUpdateRequest.Parser, new[]{ "Station" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationAddUpdateResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationAddUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroupAddUpdateRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroupAddUpdateRequest.Parser, new[]{ "StationGroup" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroupAddUpdateResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroupAddUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardAddUpdateRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardAddUpdateRequest.Parser, new[]{ "RateCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardAddUpdateResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardAddUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypartAddUpdateRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypartAddUpdateRequest.Parser, new[]{ "RateCardDaypart" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypartAddUpdateResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypartAddUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardTypeAddUpdateRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardTypeAddUpdateRequest.Parser, new[]{ "RateCardType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardTypeAddUpdateResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardTypeAddUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRangeAddUpdateRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRangeAddUpdateRequest.Parser, new[]{ "SellingTitleTimeRange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRangeAddUpdateResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRangeAddUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeekAddUpdateRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeekAddUpdateRequest.Parser, new[]{ "SellingTitleDaysOfWeek" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeekAddUpdateResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeekAddUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriodAddUpdateRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriodAddUpdateRequest.Parser, new[]{ "SellableInventoryPeriod" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriodAddUpdateResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriodAddUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryAddUpdateRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryAddUpdateRequest.Parser, new[]{ "SellableInventory" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryAddUpdateResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryAddUpdateResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.GetRateCardsByStationRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.GetRateCardsByStationRequest.Parser, new[]{ "StationHashKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.GetRateCardsByStationResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.GetRateCardsByStationResponse.Parser, new[]{ "RateCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.GetRateCardsByDateRangeRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.GetRateCardsByDateRangeRequest.Parser, new[]{ "StartDate", "EndDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.GetRateCardsByDateRangeResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.GetRateCardsByDateRangeResponse.Parser, new[]{ "RateCard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.GetConfirmedInventoryRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.GetConfirmedInventoryRequest.Parser, new[]{ "StationList", "RateCardTypeHashKey", "RateCardDaypartList", "SellingTitleList", "BroadcastWeekList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.GetConfirmedInventoryResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.GetConfirmedInventoryResponse.Parser, new[]{ "SellableInventoryDto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.BulkStoreRequest), global::Videa.SellableInventoryMartNS.Service.Proto.Types.BulkStoreRequest.Parser, new[]{ "SellingTitle", "Station", "StationGroup", "RateCard", "RateCardDaypart", "RateCardType", "SellingTitleTimeRange", "SellingTitleDaysOfWeek", "SellableInventoryPeriod", "SellableInventory", "SellableInventoryDto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Videa.SellableInventoryMartNS.Service.Proto.Types.BulkStoreResponse), global::Videa.SellableInventoryMartNS.Service.Proto.Types.BulkStoreResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SellingTitle : pb::IMessage<SellingTitle> {
    private static readonly pb::MessageParser<SellingTitle> _parser = new pb::MessageParser<SellingTitle>(() => new SellingTitle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitle(SellingTitle other) : this() {
      sellingTitleHashKey_ = other.sellingTitleHashKey_;
      sellingTitleSqn_ = other.sellingTitleSqn_;
      sellingTitleName_ = other.sellingTitleName_;
      SellingTitleStartDate = other.sellingTitleStartDate_ != null ? other.SellingTitleStartDate.Clone() : null;
      SellingTitleEndDate = other.sellingTitleEndDate_ != null ? other.SellingTitleEndDate.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitle Clone() {
      return new SellingTitle(this);
    }

    /// <summary>Field number for the "SellingTitleHashKey" field.</summary>
    public const int SellingTitleHashKeyFieldNumber = 1;
    private string sellingTitleHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleHashKey {
      get { return sellingTitleHashKey_; }
      set {
        sellingTitleHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellingTitleSqn" field.</summary>
    public const int SellingTitleSqnFieldNumber = 2;
    private int sellingTitleSqn_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SellingTitleSqn {
      get { return sellingTitleSqn_; }
      set {
        sellingTitleSqn_ = value;
      }
    }

    /// <summary>Field number for the "SellingTitleName" field.</summary>
    public const int SellingTitleNameFieldNumber = 3;
    private string sellingTitleName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleName {
      get { return sellingTitleName_; }
      set {
        sellingTitleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellingTitleStartDate" field.</summary>
    public const int SellingTitleStartDateFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp sellingTitleStartDate_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp SellingTitleStartDate {
      get { return sellingTitleStartDate_; }
      set {
        sellingTitleStartDate_ = value;
      }
    }

    /// <summary>Field number for the "SellingTitleEndDate" field.</summary>
    public const int SellingTitleEndDateFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp sellingTitleEndDate_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp SellingTitleEndDate {
      get { return sellingTitleEndDate_; }
      set {
        sellingTitleEndDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SellingTitleHashKey != other.SellingTitleHashKey) return false;
      if (SellingTitleSqn != other.SellingTitleSqn) return false;
      if (SellingTitleName != other.SellingTitleName) return false;
      if (!object.Equals(SellingTitleStartDate, other.SellingTitleStartDate)) return false;
      if (!object.Equals(SellingTitleEndDate, other.SellingTitleEndDate)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SellingTitleHashKey.Length != 0) hash ^= SellingTitleHashKey.GetHashCode();
      if (SellingTitleSqn != 0) hash ^= SellingTitleSqn.GetHashCode();
      if (SellingTitleName.Length != 0) hash ^= SellingTitleName.GetHashCode();
      if (sellingTitleStartDate_ != null) hash ^= SellingTitleStartDate.GetHashCode();
      if (sellingTitleEndDate_ != null) hash ^= SellingTitleEndDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SellingTitleHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SellingTitleHashKey);
      }
      if (SellingTitleSqn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SellingTitleSqn);
      }
      if (SellingTitleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SellingTitleName);
      }
      if (sellingTitleStartDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SellingTitleStartDate);
      }
      if (sellingTitleEndDate_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SellingTitleEndDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SellingTitleHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleHashKey);
      }
      if (SellingTitleSqn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SellingTitleSqn);
      }
      if (SellingTitleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleName);
      }
      if (sellingTitleStartDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellingTitleStartDate);
      }
      if (sellingTitleEndDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellingTitleEndDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitle other) {
      if (other == null) {
        return;
      }
      if (other.SellingTitleHashKey.Length != 0) {
        SellingTitleHashKey = other.SellingTitleHashKey;
      }
      if (other.SellingTitleSqn != 0) {
        SellingTitleSqn = other.SellingTitleSqn;
      }
      if (other.SellingTitleName.Length != 0) {
        SellingTitleName = other.SellingTitleName;
      }
      if (other.sellingTitleStartDate_ != null) {
        if (sellingTitleStartDate_ == null) {
          sellingTitleStartDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        SellingTitleStartDate.MergeFrom(other.SellingTitleStartDate);
      }
      if (other.sellingTitleEndDate_ != null) {
        if (sellingTitleEndDate_ == null) {
          sellingTitleEndDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        SellingTitleEndDate.MergeFrom(other.SellingTitleEndDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SellingTitleHashKey = input.ReadString();
            break;
          }
          case 16: {
            SellingTitleSqn = input.ReadInt32();
            break;
          }
          case 26: {
            SellingTitleName = input.ReadString();
            break;
          }
          case 34: {
            if (sellingTitleStartDate_ == null) {
              sellingTitleStartDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(sellingTitleStartDate_);
            break;
          }
          case 42: {
            if (sellingTitleEndDate_ == null) {
              sellingTitleEndDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(sellingTitleEndDate_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Station : pb::IMessage<Station> {
    private static readonly pb::MessageParser<Station> _parser = new pb::MessageParser<Station>(() => new Station());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Station> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Station() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Station(Station other) : this() {
      stationHashKey_ = other.stationHashKey_;
      stationSqn_ = other.stationSqn_;
      stationName_ = other.stationName_;
      stationCallLetters_ = other.stationCallLetters_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Station Clone() {
      return new Station(this);
    }

    /// <summary>Field number for the "StationHashKey" field.</summary>
    public const int StationHashKeyFieldNumber = 1;
    private string stationHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationHashKey {
      get { return stationHashKey_; }
      set {
        stationHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StationSqn" field.</summary>
    public const int StationSqnFieldNumber = 2;
    private int stationSqn_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StationSqn {
      get { return stationSqn_; }
      set {
        stationSqn_ = value;
      }
    }

    /// <summary>Field number for the "StationName" field.</summary>
    public const int StationNameFieldNumber = 3;
    private string stationName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationName {
      get { return stationName_; }
      set {
        stationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StationCallLetters" field.</summary>
    public const int StationCallLettersFieldNumber = 4;
    private string stationCallLetters_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationCallLetters {
      get { return stationCallLetters_; }
      set {
        stationCallLetters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Station);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Station other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationHashKey != other.StationHashKey) return false;
      if (StationSqn != other.StationSqn) return false;
      if (StationName != other.StationName) return false;
      if (StationCallLetters != other.StationCallLetters) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StationHashKey.Length != 0) hash ^= StationHashKey.GetHashCode();
      if (StationSqn != 0) hash ^= StationSqn.GetHashCode();
      if (StationName.Length != 0) hash ^= StationName.GetHashCode();
      if (StationCallLetters.Length != 0) hash ^= StationCallLetters.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StationHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StationHashKey);
      }
      if (StationSqn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StationSqn);
      }
      if (StationName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StationName);
      }
      if (StationCallLetters.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StationCallLetters);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StationHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationHashKey);
      }
      if (StationSqn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StationSqn);
      }
      if (StationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationName);
      }
      if (StationCallLetters.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationCallLetters);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Station other) {
      if (other == null) {
        return;
      }
      if (other.StationHashKey.Length != 0) {
        StationHashKey = other.StationHashKey;
      }
      if (other.StationSqn != 0) {
        StationSqn = other.StationSqn;
      }
      if (other.StationName.Length != 0) {
        StationName = other.StationName;
      }
      if (other.StationCallLetters.Length != 0) {
        StationCallLetters = other.StationCallLetters;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StationHashKey = input.ReadString();
            break;
          }
          case 16: {
            StationSqn = input.ReadInt32();
            break;
          }
          case 26: {
            StationName = input.ReadString();
            break;
          }
          case 34: {
            StationCallLetters = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StationGroup : pb::IMessage<StationGroup> {
    private static readonly pb::MessageParser<StationGroup> _parser = new pb::MessageParser<StationGroup>(() => new StationGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroup(StationGroup other) : this() {
      stationGroupHashKey_ = other.stationGroupHashKey_;
      stationGroupSqn_ = other.stationGroupSqn_;
      stationGroupName_ = other.stationGroupName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroup Clone() {
      return new StationGroup(this);
    }

    /// <summary>Field number for the "StationGroupHashKey" field.</summary>
    public const int StationGroupHashKeyFieldNumber = 1;
    private string stationGroupHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationGroupHashKey {
      get { return stationGroupHashKey_; }
      set {
        stationGroupHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StationGroupSqn" field.</summary>
    public const int StationGroupSqnFieldNumber = 2;
    private int stationGroupSqn_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StationGroupSqn {
      get { return stationGroupSqn_; }
      set {
        stationGroupSqn_ = value;
      }
    }

    /// <summary>Field number for the "StationGroupName" field.</summary>
    public const int StationGroupNameFieldNumber = 3;
    private string stationGroupName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationGroupName {
      get { return stationGroupName_; }
      set {
        stationGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationGroupHashKey != other.StationGroupHashKey) return false;
      if (StationGroupSqn != other.StationGroupSqn) return false;
      if (StationGroupName != other.StationGroupName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StationGroupHashKey.Length != 0) hash ^= StationGroupHashKey.GetHashCode();
      if (StationGroupSqn != 0) hash ^= StationGroupSqn.GetHashCode();
      if (StationGroupName.Length != 0) hash ^= StationGroupName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StationGroupHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StationGroupHashKey);
      }
      if (StationGroupSqn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StationGroupSqn);
      }
      if (StationGroupName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StationGroupName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StationGroupHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationGroupHashKey);
      }
      if (StationGroupSqn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StationGroupSqn);
      }
      if (StationGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationGroupName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationGroup other) {
      if (other == null) {
        return;
      }
      if (other.StationGroupHashKey.Length != 0) {
        StationGroupHashKey = other.StationGroupHashKey;
      }
      if (other.StationGroupSqn != 0) {
        StationGroupSqn = other.StationGroupSqn;
      }
      if (other.StationGroupName.Length != 0) {
        StationGroupName = other.StationGroupName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StationGroupHashKey = input.ReadString();
            break;
          }
          case 16: {
            StationGroupSqn = input.ReadInt32();
            break;
          }
          case 26: {
            StationGroupName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RateCard : pb::IMessage<RateCard> {
    private static readonly pb::MessageParser<RateCard> _parser = new pb::MessageParser<RateCard>(() => new RateCard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCard(RateCard other) : this() {
      rateCardHashKey_ = other.rateCardHashKey_;
      rateCardSqn_ = other.rateCardSqn_;
      rateCardName_ = other.rateCardName_;
      RateCardStartDate = other.rateCardStartDate_ != null ? other.RateCardStartDate.Clone() : null;
      RateCardEndDate = other.rateCardEndDate_ != null ? other.RateCardEndDate.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCard Clone() {
      return new RateCard(this);
    }

    /// <summary>Field number for the "RateCardHashKey" field.</summary>
    public const int RateCardHashKeyFieldNumber = 1;
    private string rateCardHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardHashKey {
      get { return rateCardHashKey_; }
      set {
        rateCardHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RateCardSqn" field.</summary>
    public const int RateCardSqnFieldNumber = 2;
    private int rateCardSqn_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateCardSqn {
      get { return rateCardSqn_; }
      set {
        rateCardSqn_ = value;
      }
    }

    /// <summary>Field number for the "RateCardName" field.</summary>
    public const int RateCardNameFieldNumber = 3;
    private string rateCardName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardName {
      get { return rateCardName_; }
      set {
        rateCardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RateCardStartDate" field.</summary>
    public const int RateCardStartDateFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp rateCardStartDate_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RateCardStartDate {
      get { return rateCardStartDate_; }
      set {
        rateCardStartDate_ = value;
      }
    }

    /// <summary>Field number for the "RateCardEndDate" field.</summary>
    public const int RateCardEndDateFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp rateCardEndDate_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp RateCardEndDate {
      get { return rateCardEndDate_; }
      set {
        rateCardEndDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RateCardHashKey != other.RateCardHashKey) return false;
      if (RateCardSqn != other.RateCardSqn) return false;
      if (RateCardName != other.RateCardName) return false;
      if (!object.Equals(RateCardStartDate, other.RateCardStartDate)) return false;
      if (!object.Equals(RateCardEndDate, other.RateCardEndDate)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RateCardHashKey.Length != 0) hash ^= RateCardHashKey.GetHashCode();
      if (RateCardSqn != 0) hash ^= RateCardSqn.GetHashCode();
      if (RateCardName.Length != 0) hash ^= RateCardName.GetHashCode();
      if (rateCardStartDate_ != null) hash ^= RateCardStartDate.GetHashCode();
      if (rateCardEndDate_ != null) hash ^= RateCardEndDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RateCardHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RateCardHashKey);
      }
      if (RateCardSqn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RateCardSqn);
      }
      if (RateCardName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RateCardName);
      }
      if (rateCardStartDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RateCardStartDate);
      }
      if (rateCardEndDate_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RateCardEndDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RateCardHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardHashKey);
      }
      if (RateCardSqn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RateCardSqn);
      }
      if (RateCardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardName);
      }
      if (rateCardStartDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RateCardStartDate);
      }
      if (rateCardEndDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RateCardEndDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCard other) {
      if (other == null) {
        return;
      }
      if (other.RateCardHashKey.Length != 0) {
        RateCardHashKey = other.RateCardHashKey;
      }
      if (other.RateCardSqn != 0) {
        RateCardSqn = other.RateCardSqn;
      }
      if (other.RateCardName.Length != 0) {
        RateCardName = other.RateCardName;
      }
      if (other.rateCardStartDate_ != null) {
        if (rateCardStartDate_ == null) {
          rateCardStartDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        RateCardStartDate.MergeFrom(other.RateCardStartDate);
      }
      if (other.rateCardEndDate_ != null) {
        if (rateCardEndDate_ == null) {
          rateCardEndDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        RateCardEndDate.MergeFrom(other.RateCardEndDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RateCardHashKey = input.ReadString();
            break;
          }
          case 16: {
            RateCardSqn = input.ReadInt32();
            break;
          }
          case 26: {
            RateCardName = input.ReadString();
            break;
          }
          case 34: {
            if (rateCardStartDate_ == null) {
              rateCardStartDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(rateCardStartDate_);
            break;
          }
          case 42: {
            if (rateCardEndDate_ == null) {
              rateCardEndDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(rateCardEndDate_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RateCardDaypart : pb::IMessage<RateCardDaypart> {
    private static readonly pb::MessageParser<RateCardDaypart> _parser = new pb::MessageParser<RateCardDaypart>(() => new RateCardDaypart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardDaypart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypart(RateCardDaypart other) : this() {
      rateCardDaypartHashKey_ = other.rateCardDaypartHashKey_;
      rateCardDaypartSqn_ = other.rateCardDaypartSqn_;
      rateCardDaypartName_ = other.rateCardDaypartName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypart Clone() {
      return new RateCardDaypart(this);
    }

    /// <summary>Field number for the "RateCardDaypartHashKey" field.</summary>
    public const int RateCardDaypartHashKeyFieldNumber = 1;
    private string rateCardDaypartHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardDaypartHashKey {
      get { return rateCardDaypartHashKey_; }
      set {
        rateCardDaypartHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RateCardDaypartSqn" field.</summary>
    public const int RateCardDaypartSqnFieldNumber = 2;
    private int rateCardDaypartSqn_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateCardDaypartSqn {
      get { return rateCardDaypartSqn_; }
      set {
        rateCardDaypartSqn_ = value;
      }
    }

    /// <summary>Field number for the "RateCardDaypartName" field.</summary>
    public const int RateCardDaypartNameFieldNumber = 3;
    private string rateCardDaypartName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardDaypartName {
      get { return rateCardDaypartName_; }
      set {
        rateCardDaypartName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardDaypart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardDaypart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RateCardDaypartHashKey != other.RateCardDaypartHashKey) return false;
      if (RateCardDaypartSqn != other.RateCardDaypartSqn) return false;
      if (RateCardDaypartName != other.RateCardDaypartName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RateCardDaypartHashKey.Length != 0) hash ^= RateCardDaypartHashKey.GetHashCode();
      if (RateCardDaypartSqn != 0) hash ^= RateCardDaypartSqn.GetHashCode();
      if (RateCardDaypartName.Length != 0) hash ^= RateCardDaypartName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RateCardDaypartHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RateCardDaypartHashKey);
      }
      if (RateCardDaypartSqn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RateCardDaypartSqn);
      }
      if (RateCardDaypartName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RateCardDaypartName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RateCardDaypartHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardDaypartHashKey);
      }
      if (RateCardDaypartSqn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RateCardDaypartSqn);
      }
      if (RateCardDaypartName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardDaypartName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardDaypart other) {
      if (other == null) {
        return;
      }
      if (other.RateCardDaypartHashKey.Length != 0) {
        RateCardDaypartHashKey = other.RateCardDaypartHashKey;
      }
      if (other.RateCardDaypartSqn != 0) {
        RateCardDaypartSqn = other.RateCardDaypartSqn;
      }
      if (other.RateCardDaypartName.Length != 0) {
        RateCardDaypartName = other.RateCardDaypartName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RateCardDaypartHashKey = input.ReadString();
            break;
          }
          case 16: {
            RateCardDaypartSqn = input.ReadInt32();
            break;
          }
          case 26: {
            RateCardDaypartName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RateCardType : pb::IMessage<RateCardType> {
    private static readonly pb::MessageParser<RateCardType> _parser = new pb::MessageParser<RateCardType>(() => new RateCardType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardType(RateCardType other) : this() {
      rateCardTypeHashKey_ = other.rateCardTypeHashKey_;
      rateCardTypeSqn_ = other.rateCardTypeSqn_;
      rateCardTypeName_ = other.rateCardTypeName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardType Clone() {
      return new RateCardType(this);
    }

    /// <summary>Field number for the "RateCardTypeHashKey" field.</summary>
    public const int RateCardTypeHashKeyFieldNumber = 1;
    private string rateCardTypeHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardTypeHashKey {
      get { return rateCardTypeHashKey_; }
      set {
        rateCardTypeHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RateCardTypeSqn" field.</summary>
    public const int RateCardTypeSqnFieldNumber = 2;
    private int rateCardTypeSqn_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RateCardTypeSqn {
      get { return rateCardTypeSqn_; }
      set {
        rateCardTypeSqn_ = value;
      }
    }

    /// <summary>Field number for the "RateCardTypeName" field.</summary>
    public const int RateCardTypeNameFieldNumber = 3;
    private string rateCardTypeName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardTypeName {
      get { return rateCardTypeName_; }
      set {
        rateCardTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RateCardTypeHashKey != other.RateCardTypeHashKey) return false;
      if (RateCardTypeSqn != other.RateCardTypeSqn) return false;
      if (RateCardTypeName != other.RateCardTypeName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RateCardTypeHashKey.Length != 0) hash ^= RateCardTypeHashKey.GetHashCode();
      if (RateCardTypeSqn != 0) hash ^= RateCardTypeSqn.GetHashCode();
      if (RateCardTypeName.Length != 0) hash ^= RateCardTypeName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RateCardTypeHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RateCardTypeHashKey);
      }
      if (RateCardTypeSqn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RateCardTypeSqn);
      }
      if (RateCardTypeName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RateCardTypeName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RateCardTypeHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardTypeHashKey);
      }
      if (RateCardTypeSqn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RateCardTypeSqn);
      }
      if (RateCardTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardTypeName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardType other) {
      if (other == null) {
        return;
      }
      if (other.RateCardTypeHashKey.Length != 0) {
        RateCardTypeHashKey = other.RateCardTypeHashKey;
      }
      if (other.RateCardTypeSqn != 0) {
        RateCardTypeSqn = other.RateCardTypeSqn;
      }
      if (other.RateCardTypeName.Length != 0) {
        RateCardTypeName = other.RateCardTypeName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RateCardTypeHashKey = input.ReadString();
            break;
          }
          case 16: {
            RateCardTypeSqn = input.ReadInt32();
            break;
          }
          case 26: {
            RateCardTypeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellingTitleTimeRange : pb::IMessage<SellingTitleTimeRange> {
    private static readonly pb::MessageParser<SellingTitleTimeRange> _parser = new pb::MessageParser<SellingTitleTimeRange>(() => new SellingTitleTimeRange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleTimeRange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRange(SellingTitleTimeRange other) : this() {
      sellingTitleTimeRangeHashKey_ = other.sellingTitleTimeRangeHashKey_;
      timeRangeSqn_ = other.timeRangeSqn_;
      sellingTitleTimeRangeName_ = other.sellingTitleTimeRangeName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRange Clone() {
      return new SellingTitleTimeRange(this);
    }

    /// <summary>Field number for the "SellingTitleTimeRangeHashKey" field.</summary>
    public const int SellingTitleTimeRangeHashKeyFieldNumber = 1;
    private string sellingTitleTimeRangeHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleTimeRangeHashKey {
      get { return sellingTitleTimeRangeHashKey_; }
      set {
        sellingTitleTimeRangeHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TimeRangeSqn" field.</summary>
    public const int TimeRangeSqnFieldNumber = 2;
    private int timeRangeSqn_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeRangeSqn {
      get { return timeRangeSqn_; }
      set {
        timeRangeSqn_ = value;
      }
    }

    /// <summary>Field number for the "SellingTitleTimeRangeName" field.</summary>
    public const int SellingTitleTimeRangeNameFieldNumber = 3;
    private string sellingTitleTimeRangeName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleTimeRangeName {
      get { return sellingTitleTimeRangeName_; }
      set {
        sellingTitleTimeRangeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleTimeRange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleTimeRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SellingTitleTimeRangeHashKey != other.SellingTitleTimeRangeHashKey) return false;
      if (TimeRangeSqn != other.TimeRangeSqn) return false;
      if (SellingTitleTimeRangeName != other.SellingTitleTimeRangeName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SellingTitleTimeRangeHashKey.Length != 0) hash ^= SellingTitleTimeRangeHashKey.GetHashCode();
      if (TimeRangeSqn != 0) hash ^= TimeRangeSqn.GetHashCode();
      if (SellingTitleTimeRangeName.Length != 0) hash ^= SellingTitleTimeRangeName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SellingTitleTimeRangeHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SellingTitleTimeRangeHashKey);
      }
      if (TimeRangeSqn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimeRangeSqn);
      }
      if (SellingTitleTimeRangeName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SellingTitleTimeRangeName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SellingTitleTimeRangeHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleTimeRangeHashKey);
      }
      if (TimeRangeSqn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeRangeSqn);
      }
      if (SellingTitleTimeRangeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleTimeRangeName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleTimeRange other) {
      if (other == null) {
        return;
      }
      if (other.SellingTitleTimeRangeHashKey.Length != 0) {
        SellingTitleTimeRangeHashKey = other.SellingTitleTimeRangeHashKey;
      }
      if (other.TimeRangeSqn != 0) {
        TimeRangeSqn = other.TimeRangeSqn;
      }
      if (other.SellingTitleTimeRangeName.Length != 0) {
        SellingTitleTimeRangeName = other.SellingTitleTimeRangeName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SellingTitleTimeRangeHashKey = input.ReadString();
            break;
          }
          case 16: {
            TimeRangeSqn = input.ReadInt32();
            break;
          }
          case 26: {
            SellingTitleTimeRangeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellingTitleDaysOfWeek : pb::IMessage<SellingTitleDaysOfWeek> {
    private static readonly pb::MessageParser<SellingTitleDaysOfWeek> _parser = new pb::MessageParser<SellingTitleDaysOfWeek>(() => new SellingTitleDaysOfWeek());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleDaysOfWeek> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeek() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeek(SellingTitleDaysOfWeek other) : this() {
      sellingTitleDaysOfWeekHashKey_ = other.sellingTitleDaysOfWeekHashKey_;
      sellingTitleDaysOfWeekSqn_ = other.sellingTitleDaysOfWeekSqn_;
      sellingTitleDaysOfWeekName_ = other.sellingTitleDaysOfWeekName_;
      mon_ = other.mon_;
      tue_ = other.tue_;
      wed_ = other.wed_;
      thu_ = other.thu_;
      fri_ = other.fri_;
      sat_ = other.sat_;
      sun_ = other.sun_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeek Clone() {
      return new SellingTitleDaysOfWeek(this);
    }

    /// <summary>Field number for the "SellingTitleDaysOfWeekHashKey" field.</summary>
    public const int SellingTitleDaysOfWeekHashKeyFieldNumber = 1;
    private string sellingTitleDaysOfWeekHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleDaysOfWeekHashKey {
      get { return sellingTitleDaysOfWeekHashKey_; }
      set {
        sellingTitleDaysOfWeekHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellingTitleDaysOfWeekSqn" field.</summary>
    public const int SellingTitleDaysOfWeekSqnFieldNumber = 2;
    private int sellingTitleDaysOfWeekSqn_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SellingTitleDaysOfWeekSqn {
      get { return sellingTitleDaysOfWeekSqn_; }
      set {
        sellingTitleDaysOfWeekSqn_ = value;
      }
    }

    /// <summary>Field number for the "SellingTitleDaysOfWeekName" field.</summary>
    public const int SellingTitleDaysOfWeekNameFieldNumber = 3;
    private string sellingTitleDaysOfWeekName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleDaysOfWeekName {
      get { return sellingTitleDaysOfWeekName_; }
      set {
        sellingTitleDaysOfWeekName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Mon" field.</summary>
    public const int MonFieldNumber = 4;
    private bool mon_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mon {
      get { return mon_; }
      set {
        mon_ = value;
      }
    }

    /// <summary>Field number for the "Tue" field.</summary>
    public const int TueFieldNumber = 5;
    private bool tue_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Tue {
      get { return tue_; }
      set {
        tue_ = value;
      }
    }

    /// <summary>Field number for the "Wed" field.</summary>
    public const int WedFieldNumber = 6;
    private bool wed_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Wed {
      get { return wed_; }
      set {
        wed_ = value;
      }
    }

    /// <summary>Field number for the "Thu" field.</summary>
    public const int ThuFieldNumber = 7;
    private bool thu_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Thu {
      get { return thu_; }
      set {
        thu_ = value;
      }
    }

    /// <summary>Field number for the "Fri" field.</summary>
    public const int FriFieldNumber = 8;
    private bool fri_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fri {
      get { return fri_; }
      set {
        fri_ = value;
      }
    }

    /// <summary>Field number for the "Sat" field.</summary>
    public const int SatFieldNumber = 9;
    private bool sat_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sat {
      get { return sat_; }
      set {
        sat_ = value;
      }
    }

    /// <summary>Field number for the "Sun" field.</summary>
    public const int SunFieldNumber = 10;
    private bool sun_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sun {
      get { return sun_; }
      set {
        sun_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleDaysOfWeek);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleDaysOfWeek other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SellingTitleDaysOfWeekHashKey != other.SellingTitleDaysOfWeekHashKey) return false;
      if (SellingTitleDaysOfWeekSqn != other.SellingTitleDaysOfWeekSqn) return false;
      if (SellingTitleDaysOfWeekName != other.SellingTitleDaysOfWeekName) return false;
      if (Mon != other.Mon) return false;
      if (Tue != other.Tue) return false;
      if (Wed != other.Wed) return false;
      if (Thu != other.Thu) return false;
      if (Fri != other.Fri) return false;
      if (Sat != other.Sat) return false;
      if (Sun != other.Sun) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SellingTitleDaysOfWeekHashKey.Length != 0) hash ^= SellingTitleDaysOfWeekHashKey.GetHashCode();
      if (SellingTitleDaysOfWeekSqn != 0) hash ^= SellingTitleDaysOfWeekSqn.GetHashCode();
      if (SellingTitleDaysOfWeekName.Length != 0) hash ^= SellingTitleDaysOfWeekName.GetHashCode();
      if (Mon != false) hash ^= Mon.GetHashCode();
      if (Tue != false) hash ^= Tue.GetHashCode();
      if (Wed != false) hash ^= Wed.GetHashCode();
      if (Thu != false) hash ^= Thu.GetHashCode();
      if (Fri != false) hash ^= Fri.GetHashCode();
      if (Sat != false) hash ^= Sat.GetHashCode();
      if (Sun != false) hash ^= Sun.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SellingTitleDaysOfWeekHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SellingTitleDaysOfWeekHashKey);
      }
      if (SellingTitleDaysOfWeekSqn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SellingTitleDaysOfWeekSqn);
      }
      if (SellingTitleDaysOfWeekName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SellingTitleDaysOfWeekName);
      }
      if (Mon != false) {
        output.WriteRawTag(32);
        output.WriteBool(Mon);
      }
      if (Tue != false) {
        output.WriteRawTag(40);
        output.WriteBool(Tue);
      }
      if (Wed != false) {
        output.WriteRawTag(48);
        output.WriteBool(Wed);
      }
      if (Thu != false) {
        output.WriteRawTag(56);
        output.WriteBool(Thu);
      }
      if (Fri != false) {
        output.WriteRawTag(64);
        output.WriteBool(Fri);
      }
      if (Sat != false) {
        output.WriteRawTag(72);
        output.WriteBool(Sat);
      }
      if (Sun != false) {
        output.WriteRawTag(80);
        output.WriteBool(Sun);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SellingTitleDaysOfWeekHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleDaysOfWeekHashKey);
      }
      if (SellingTitleDaysOfWeekSqn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SellingTitleDaysOfWeekSqn);
      }
      if (SellingTitleDaysOfWeekName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleDaysOfWeekName);
      }
      if (Mon != false) {
        size += 1 + 1;
      }
      if (Tue != false) {
        size += 1 + 1;
      }
      if (Wed != false) {
        size += 1 + 1;
      }
      if (Thu != false) {
        size += 1 + 1;
      }
      if (Fri != false) {
        size += 1 + 1;
      }
      if (Sat != false) {
        size += 1 + 1;
      }
      if (Sun != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleDaysOfWeek other) {
      if (other == null) {
        return;
      }
      if (other.SellingTitleDaysOfWeekHashKey.Length != 0) {
        SellingTitleDaysOfWeekHashKey = other.SellingTitleDaysOfWeekHashKey;
      }
      if (other.SellingTitleDaysOfWeekSqn != 0) {
        SellingTitleDaysOfWeekSqn = other.SellingTitleDaysOfWeekSqn;
      }
      if (other.SellingTitleDaysOfWeekName.Length != 0) {
        SellingTitleDaysOfWeekName = other.SellingTitleDaysOfWeekName;
      }
      if (other.Mon != false) {
        Mon = other.Mon;
      }
      if (other.Tue != false) {
        Tue = other.Tue;
      }
      if (other.Wed != false) {
        Wed = other.Wed;
      }
      if (other.Thu != false) {
        Thu = other.Thu;
      }
      if (other.Fri != false) {
        Fri = other.Fri;
      }
      if (other.Sat != false) {
        Sat = other.Sat;
      }
      if (other.Sun != false) {
        Sun = other.Sun;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SellingTitleDaysOfWeekHashKey = input.ReadString();
            break;
          }
          case 16: {
            SellingTitleDaysOfWeekSqn = input.ReadInt32();
            break;
          }
          case 26: {
            SellingTitleDaysOfWeekName = input.ReadString();
            break;
          }
          case 32: {
            Mon = input.ReadBool();
            break;
          }
          case 40: {
            Tue = input.ReadBool();
            break;
          }
          case 48: {
            Wed = input.ReadBool();
            break;
          }
          case 56: {
            Thu = input.ReadBool();
            break;
          }
          case 64: {
            Fri = input.ReadBool();
            break;
          }
          case 72: {
            Sat = input.ReadBool();
            break;
          }
          case 80: {
            Sun = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellableInventoryPeriod : pb::IMessage<SellableInventoryPeriod> {
    private static readonly pb::MessageParser<SellableInventoryPeriod> _parser = new pb::MessageParser<SellableInventoryPeriod>(() => new SellableInventoryPeriod());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellableInventoryPeriod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriod(SellableInventoryPeriod other) : this() {
      sellableInventoryPeriodHashKey_ = other.sellableInventoryPeriodHashKey_;
      sellableInventoryPeriodSqn_ = other.sellableInventoryPeriodSqn_;
      sellableInventoryPeriodName_ = other.sellableInventoryPeriodName_;
      SellableInventoryPeriodStartDate = other.sellableInventoryPeriodStartDate_ != null ? other.SellableInventoryPeriodStartDate.Clone() : null;
      SellableInventoryPeriodEndDate = other.sellableInventoryPeriodEndDate_ != null ? other.SellableInventoryPeriodEndDate.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriod Clone() {
      return new SellableInventoryPeriod(this);
    }

    /// <summary>Field number for the "SellableInventoryPeriodHashKey" field.</summary>
    public const int SellableInventoryPeriodHashKeyFieldNumber = 1;
    private string sellableInventoryPeriodHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellableInventoryPeriodHashKey {
      get { return sellableInventoryPeriodHashKey_; }
      set {
        sellableInventoryPeriodHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellableInventoryPeriodSqn" field.</summary>
    public const int SellableInventoryPeriodSqnFieldNumber = 2;
    private int sellableInventoryPeriodSqn_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SellableInventoryPeriodSqn {
      get { return sellableInventoryPeriodSqn_; }
      set {
        sellableInventoryPeriodSqn_ = value;
      }
    }

    /// <summary>Field number for the "SellableInventoryPeriodName" field.</summary>
    public const int SellableInventoryPeriodNameFieldNumber = 3;
    private string sellableInventoryPeriodName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellableInventoryPeriodName {
      get { return sellableInventoryPeriodName_; }
      set {
        sellableInventoryPeriodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellableInventoryPeriodStartDate" field.</summary>
    public const int SellableInventoryPeriodStartDateFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp sellableInventoryPeriodStartDate_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp SellableInventoryPeriodStartDate {
      get { return sellableInventoryPeriodStartDate_; }
      set {
        sellableInventoryPeriodStartDate_ = value;
      }
    }

    /// <summary>Field number for the "SellableInventoryPeriodEndDate" field.</summary>
    public const int SellableInventoryPeriodEndDateFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp sellableInventoryPeriodEndDate_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp SellableInventoryPeriodEndDate {
      get { return sellableInventoryPeriodEndDate_; }
      set {
        sellableInventoryPeriodEndDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellableInventoryPeriod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellableInventoryPeriod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SellableInventoryPeriodHashKey != other.SellableInventoryPeriodHashKey) return false;
      if (SellableInventoryPeriodSqn != other.SellableInventoryPeriodSqn) return false;
      if (SellableInventoryPeriodName != other.SellableInventoryPeriodName) return false;
      if (!object.Equals(SellableInventoryPeriodStartDate, other.SellableInventoryPeriodStartDate)) return false;
      if (!object.Equals(SellableInventoryPeriodEndDate, other.SellableInventoryPeriodEndDate)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SellableInventoryPeriodHashKey.Length != 0) hash ^= SellableInventoryPeriodHashKey.GetHashCode();
      if (SellableInventoryPeriodSqn != 0) hash ^= SellableInventoryPeriodSqn.GetHashCode();
      if (SellableInventoryPeriodName.Length != 0) hash ^= SellableInventoryPeriodName.GetHashCode();
      if (sellableInventoryPeriodStartDate_ != null) hash ^= SellableInventoryPeriodStartDate.GetHashCode();
      if (sellableInventoryPeriodEndDate_ != null) hash ^= SellableInventoryPeriodEndDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SellableInventoryPeriodHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SellableInventoryPeriodHashKey);
      }
      if (SellableInventoryPeriodSqn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SellableInventoryPeriodSqn);
      }
      if (SellableInventoryPeriodName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SellableInventoryPeriodName);
      }
      if (sellableInventoryPeriodStartDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SellableInventoryPeriodStartDate);
      }
      if (sellableInventoryPeriodEndDate_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SellableInventoryPeriodEndDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SellableInventoryPeriodHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellableInventoryPeriodHashKey);
      }
      if (SellableInventoryPeriodSqn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SellableInventoryPeriodSqn);
      }
      if (SellableInventoryPeriodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellableInventoryPeriodName);
      }
      if (sellableInventoryPeriodStartDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellableInventoryPeriodStartDate);
      }
      if (sellableInventoryPeriodEndDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellableInventoryPeriodEndDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellableInventoryPeriod other) {
      if (other == null) {
        return;
      }
      if (other.SellableInventoryPeriodHashKey.Length != 0) {
        SellableInventoryPeriodHashKey = other.SellableInventoryPeriodHashKey;
      }
      if (other.SellableInventoryPeriodSqn != 0) {
        SellableInventoryPeriodSqn = other.SellableInventoryPeriodSqn;
      }
      if (other.SellableInventoryPeriodName.Length != 0) {
        SellableInventoryPeriodName = other.SellableInventoryPeriodName;
      }
      if (other.sellableInventoryPeriodStartDate_ != null) {
        if (sellableInventoryPeriodStartDate_ == null) {
          sellableInventoryPeriodStartDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        SellableInventoryPeriodStartDate.MergeFrom(other.SellableInventoryPeriodStartDate);
      }
      if (other.sellableInventoryPeriodEndDate_ != null) {
        if (sellableInventoryPeriodEndDate_ == null) {
          sellableInventoryPeriodEndDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        SellableInventoryPeriodEndDate.MergeFrom(other.SellableInventoryPeriodEndDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SellableInventoryPeriodHashKey = input.ReadString();
            break;
          }
          case 16: {
            SellableInventoryPeriodSqn = input.ReadInt32();
            break;
          }
          case 26: {
            SellableInventoryPeriodName = input.ReadString();
            break;
          }
          case 34: {
            if (sellableInventoryPeriodStartDate_ == null) {
              sellableInventoryPeriodStartDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(sellableInventoryPeriodStartDate_);
            break;
          }
          case 42: {
            if (sellableInventoryPeriodEndDate_ == null) {
              sellableInventoryPeriodEndDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(sellableInventoryPeriodEndDate_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellableInventory : pb::IMessage<SellableInventory> {
    private static readonly pb::MessageParser<SellableInventory> _parser = new pb::MessageParser<SellableInventory>(() => new SellableInventory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellableInventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventory(SellableInventory other) : this() {
      sellableInventoryHashKey_ = other.sellableInventoryHashKey_;
      sellableInventorySqn_ = other.sellableInventorySqn_;
      stationHashKey_ = other.stationHashKey_;
      stationGroupHashKey_ = other.stationGroupHashKey_;
      rateCardHashKey_ = other.rateCardHashKey_;
      rateCardDaypartHashKey_ = other.rateCardDaypartHashKey_;
      rateCardTypeHashKey_ = other.rateCardTypeHashKey_;
      sellingTitleHashKey_ = other.sellingTitleHashKey_;
      sellingTitleDaysOfWeekHashKey_ = other.sellingTitleDaysOfWeekHashKey_;
      sellingTitleTimeRangeHashKey_ = other.sellingTitleTimeRangeHashKey_;
      sellableInventoryPeriodHashKey_ = other.sellableInventoryPeriodHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventory Clone() {
      return new SellableInventory(this);
    }

    /// <summary>Field number for the "SellableInventoryHashKey" field.</summary>
    public const int SellableInventoryHashKeyFieldNumber = 1;
    private string sellableInventoryHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellableInventoryHashKey {
      get { return sellableInventoryHashKey_; }
      set {
        sellableInventoryHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellableInventorySqn" field.</summary>
    public const int SellableInventorySqnFieldNumber = 2;
    private int sellableInventorySqn_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SellableInventorySqn {
      get { return sellableInventorySqn_; }
      set {
        sellableInventorySqn_ = value;
      }
    }

    /// <summary>Field number for the "StationHashKey" field.</summary>
    public const int StationHashKeyFieldNumber = 3;
    private string stationHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationHashKey {
      get { return stationHashKey_; }
      set {
        stationHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StationGroupHashKey" field.</summary>
    public const int StationGroupHashKeyFieldNumber = 4;
    private string stationGroupHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationGroupHashKey {
      get { return stationGroupHashKey_; }
      set {
        stationGroupHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RateCardHashKey" field.</summary>
    public const int RateCardHashKeyFieldNumber = 5;
    private string rateCardHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardHashKey {
      get { return rateCardHashKey_; }
      set {
        rateCardHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RateCardDaypartHashKey" field.</summary>
    public const int RateCardDaypartHashKeyFieldNumber = 6;
    private string rateCardDaypartHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardDaypartHashKey {
      get { return rateCardDaypartHashKey_; }
      set {
        rateCardDaypartHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RateCardTypeHashKey" field.</summary>
    public const int RateCardTypeHashKeyFieldNumber = 7;
    private string rateCardTypeHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardTypeHashKey {
      get { return rateCardTypeHashKey_; }
      set {
        rateCardTypeHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellingTitleHashKey" field.</summary>
    public const int SellingTitleHashKeyFieldNumber = 8;
    private string sellingTitleHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleHashKey {
      get { return sellingTitleHashKey_; }
      set {
        sellingTitleHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellingTitleDaysOfWeekHashKey" field.</summary>
    public const int SellingTitleDaysOfWeekHashKeyFieldNumber = 9;
    private string sellingTitleDaysOfWeekHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleDaysOfWeekHashKey {
      get { return sellingTitleDaysOfWeekHashKey_; }
      set {
        sellingTitleDaysOfWeekHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellingTitleTimeRangeHashKey" field.</summary>
    public const int SellingTitleTimeRangeHashKeyFieldNumber = 10;
    private string sellingTitleTimeRangeHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleTimeRangeHashKey {
      get { return sellingTitleTimeRangeHashKey_; }
      set {
        sellingTitleTimeRangeHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellableInventoryPeriodHashKey" field.</summary>
    public const int SellableInventoryPeriodHashKeyFieldNumber = 11;
    private string sellableInventoryPeriodHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellableInventoryPeriodHashKey {
      get { return sellableInventoryPeriodHashKey_; }
      set {
        sellableInventoryPeriodHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellableInventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellableInventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SellableInventoryHashKey != other.SellableInventoryHashKey) return false;
      if (SellableInventorySqn != other.SellableInventorySqn) return false;
      if (StationHashKey != other.StationHashKey) return false;
      if (StationGroupHashKey != other.StationGroupHashKey) return false;
      if (RateCardHashKey != other.RateCardHashKey) return false;
      if (RateCardDaypartHashKey != other.RateCardDaypartHashKey) return false;
      if (RateCardTypeHashKey != other.RateCardTypeHashKey) return false;
      if (SellingTitleHashKey != other.SellingTitleHashKey) return false;
      if (SellingTitleDaysOfWeekHashKey != other.SellingTitleDaysOfWeekHashKey) return false;
      if (SellingTitleTimeRangeHashKey != other.SellingTitleTimeRangeHashKey) return false;
      if (SellableInventoryPeriodHashKey != other.SellableInventoryPeriodHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SellableInventoryHashKey.Length != 0) hash ^= SellableInventoryHashKey.GetHashCode();
      if (SellableInventorySqn != 0) hash ^= SellableInventorySqn.GetHashCode();
      if (StationHashKey.Length != 0) hash ^= StationHashKey.GetHashCode();
      if (StationGroupHashKey.Length != 0) hash ^= StationGroupHashKey.GetHashCode();
      if (RateCardHashKey.Length != 0) hash ^= RateCardHashKey.GetHashCode();
      if (RateCardDaypartHashKey.Length != 0) hash ^= RateCardDaypartHashKey.GetHashCode();
      if (RateCardTypeHashKey.Length != 0) hash ^= RateCardTypeHashKey.GetHashCode();
      if (SellingTitleHashKey.Length != 0) hash ^= SellingTitleHashKey.GetHashCode();
      if (SellingTitleDaysOfWeekHashKey.Length != 0) hash ^= SellingTitleDaysOfWeekHashKey.GetHashCode();
      if (SellingTitleTimeRangeHashKey.Length != 0) hash ^= SellingTitleTimeRangeHashKey.GetHashCode();
      if (SellableInventoryPeriodHashKey.Length != 0) hash ^= SellableInventoryPeriodHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SellableInventoryHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SellableInventoryHashKey);
      }
      if (SellableInventorySqn != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SellableInventorySqn);
      }
      if (StationHashKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StationHashKey);
      }
      if (StationGroupHashKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(StationGroupHashKey);
      }
      if (RateCardHashKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RateCardHashKey);
      }
      if (RateCardDaypartHashKey.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RateCardDaypartHashKey);
      }
      if (RateCardTypeHashKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RateCardTypeHashKey);
      }
      if (SellingTitleHashKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SellingTitleHashKey);
      }
      if (SellingTitleDaysOfWeekHashKey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SellingTitleDaysOfWeekHashKey);
      }
      if (SellingTitleTimeRangeHashKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SellingTitleTimeRangeHashKey);
      }
      if (SellableInventoryPeriodHashKey.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(SellableInventoryPeriodHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SellableInventoryHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellableInventoryHashKey);
      }
      if (SellableInventorySqn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SellableInventorySqn);
      }
      if (StationHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationHashKey);
      }
      if (StationGroupHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationGroupHashKey);
      }
      if (RateCardHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardHashKey);
      }
      if (RateCardDaypartHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardDaypartHashKey);
      }
      if (RateCardTypeHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardTypeHashKey);
      }
      if (SellingTitleHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleHashKey);
      }
      if (SellingTitleDaysOfWeekHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleDaysOfWeekHashKey);
      }
      if (SellingTitleTimeRangeHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleTimeRangeHashKey);
      }
      if (SellableInventoryPeriodHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellableInventoryPeriodHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellableInventory other) {
      if (other == null) {
        return;
      }
      if (other.SellableInventoryHashKey.Length != 0) {
        SellableInventoryHashKey = other.SellableInventoryHashKey;
      }
      if (other.SellableInventorySqn != 0) {
        SellableInventorySqn = other.SellableInventorySqn;
      }
      if (other.StationHashKey.Length != 0) {
        StationHashKey = other.StationHashKey;
      }
      if (other.StationGroupHashKey.Length != 0) {
        StationGroupHashKey = other.StationGroupHashKey;
      }
      if (other.RateCardHashKey.Length != 0) {
        RateCardHashKey = other.RateCardHashKey;
      }
      if (other.RateCardDaypartHashKey.Length != 0) {
        RateCardDaypartHashKey = other.RateCardDaypartHashKey;
      }
      if (other.RateCardTypeHashKey.Length != 0) {
        RateCardTypeHashKey = other.RateCardTypeHashKey;
      }
      if (other.SellingTitleHashKey.Length != 0) {
        SellingTitleHashKey = other.SellingTitleHashKey;
      }
      if (other.SellingTitleDaysOfWeekHashKey.Length != 0) {
        SellingTitleDaysOfWeekHashKey = other.SellingTitleDaysOfWeekHashKey;
      }
      if (other.SellingTitleTimeRangeHashKey.Length != 0) {
        SellingTitleTimeRangeHashKey = other.SellingTitleTimeRangeHashKey;
      }
      if (other.SellableInventoryPeriodHashKey.Length != 0) {
        SellableInventoryPeriodHashKey = other.SellableInventoryPeriodHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SellableInventoryHashKey = input.ReadString();
            break;
          }
          case 16: {
            SellableInventorySqn = input.ReadInt32();
            break;
          }
          case 26: {
            StationHashKey = input.ReadString();
            break;
          }
          case 34: {
            StationGroupHashKey = input.ReadString();
            break;
          }
          case 42: {
            RateCardHashKey = input.ReadString();
            break;
          }
          case 50: {
            RateCardDaypartHashKey = input.ReadString();
            break;
          }
          case 58: {
            RateCardTypeHashKey = input.ReadString();
            break;
          }
          case 66: {
            SellingTitleHashKey = input.ReadString();
            break;
          }
          case 74: {
            SellingTitleDaysOfWeekHashKey = input.ReadString();
            break;
          }
          case 82: {
            SellingTitleTimeRangeHashKey = input.ReadString();
            break;
          }
          case 90: {
            SellableInventoryPeriodHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellableInventoryDto : pb::IMessage<SellableInventoryDto> {
    private static readonly pb::MessageParser<SellableInventoryDto> _parser = new pb::MessageParser<SellableInventoryDto>(() => new SellableInventoryDto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellableInventoryDto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryDto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryDto(SellableInventoryDto other) : this() {
      SellingTitleStartDate = other.sellingTitleStartDate_ != null ? other.SellingTitleStartDate.Clone() : null;
      SellingTitleEndDate = other.sellingTitleEndDate_ != null ? other.SellingTitleEndDate.Clone() : null;
      sellingTitleName_ = other.sellingTitleName_;
      rateCardDaypartName_ = other.rateCardDaypartName_;
      sellingTitleDaysOfWeekName_ = other.sellingTitleDaysOfWeekName_;
      rateCardTypeName_ = other.rateCardTypeName_;
      sellableInventoryHashKey_ = other.sellableInventoryHashKey_;
      stationHashKey_ = other.stationHashKey_;
      sellingTitleDaysOfWeekHashKey_ = other.sellingTitleDaysOfWeekHashKey_;
      rateCardTypeHashKey_ = other.rateCardTypeHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryDto Clone() {
      return new SellableInventoryDto(this);
    }

    /// <summary>Field number for the "SellingTitleStartDate" field.</summary>
    public const int SellingTitleStartDateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp sellingTitleStartDate_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp SellingTitleStartDate {
      get { return sellingTitleStartDate_; }
      set {
        sellingTitleStartDate_ = value;
      }
    }

    /// <summary>Field number for the "SellingTitleEndDate" field.</summary>
    public const int SellingTitleEndDateFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp sellingTitleEndDate_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp SellingTitleEndDate {
      get { return sellingTitleEndDate_; }
      set {
        sellingTitleEndDate_ = value;
      }
    }

    /// <summary>Field number for the "SellingTitleName" field.</summary>
    public const int SellingTitleNameFieldNumber = 3;
    private string sellingTitleName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleName {
      get { return sellingTitleName_; }
      set {
        sellingTitleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RateCardDaypartName" field.</summary>
    public const int RateCardDaypartNameFieldNumber = 4;
    private string rateCardDaypartName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardDaypartName {
      get { return rateCardDaypartName_; }
      set {
        rateCardDaypartName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellingTitleDaysOfWeekName" field.</summary>
    public const int SellingTitleDaysOfWeekNameFieldNumber = 5;
    private string sellingTitleDaysOfWeekName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleDaysOfWeekName {
      get { return sellingTitleDaysOfWeekName_; }
      set {
        sellingTitleDaysOfWeekName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RateCardTypeName" field.</summary>
    public const int RateCardTypeNameFieldNumber = 6;
    private string rateCardTypeName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardTypeName {
      get { return rateCardTypeName_; }
      set {
        rateCardTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellableInventoryHashKey" field.</summary>
    public const int SellableInventoryHashKeyFieldNumber = 7;
    private string sellableInventoryHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellableInventoryHashKey {
      get { return sellableInventoryHashKey_; }
      set {
        sellableInventoryHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StationHashKey" field.</summary>
    public const int StationHashKeyFieldNumber = 8;
    private string stationHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationHashKey {
      get { return stationHashKey_; }
      set {
        stationHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellingTitleDaysOfWeekHashKey" field.</summary>
    public const int SellingTitleDaysOfWeekHashKeyFieldNumber = 9;
    private string sellingTitleDaysOfWeekHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleDaysOfWeekHashKey {
      get { return sellingTitleDaysOfWeekHashKey_; }
      set {
        sellingTitleDaysOfWeekHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RateCardTypeHashKey" field.</summary>
    public const int RateCardTypeHashKeyFieldNumber = 10;
    private string rateCardTypeHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardTypeHashKey {
      get { return rateCardTypeHashKey_; }
      set {
        rateCardTypeHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellableInventoryDto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellableInventoryDto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SellingTitleStartDate, other.SellingTitleStartDate)) return false;
      if (!object.Equals(SellingTitleEndDate, other.SellingTitleEndDate)) return false;
      if (SellingTitleName != other.SellingTitleName) return false;
      if (RateCardDaypartName != other.RateCardDaypartName) return false;
      if (SellingTitleDaysOfWeekName != other.SellingTitleDaysOfWeekName) return false;
      if (RateCardTypeName != other.RateCardTypeName) return false;
      if (SellableInventoryHashKey != other.SellableInventoryHashKey) return false;
      if (StationHashKey != other.StationHashKey) return false;
      if (SellingTitleDaysOfWeekHashKey != other.SellingTitleDaysOfWeekHashKey) return false;
      if (RateCardTypeHashKey != other.RateCardTypeHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sellingTitleStartDate_ != null) hash ^= SellingTitleStartDate.GetHashCode();
      if (sellingTitleEndDate_ != null) hash ^= SellingTitleEndDate.GetHashCode();
      if (SellingTitleName.Length != 0) hash ^= SellingTitleName.GetHashCode();
      if (RateCardDaypartName.Length != 0) hash ^= RateCardDaypartName.GetHashCode();
      if (SellingTitleDaysOfWeekName.Length != 0) hash ^= SellingTitleDaysOfWeekName.GetHashCode();
      if (RateCardTypeName.Length != 0) hash ^= RateCardTypeName.GetHashCode();
      if (SellableInventoryHashKey.Length != 0) hash ^= SellableInventoryHashKey.GetHashCode();
      if (StationHashKey.Length != 0) hash ^= StationHashKey.GetHashCode();
      if (SellingTitleDaysOfWeekHashKey.Length != 0) hash ^= SellingTitleDaysOfWeekHashKey.GetHashCode();
      if (RateCardTypeHashKey.Length != 0) hash ^= RateCardTypeHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sellingTitleStartDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SellingTitleStartDate);
      }
      if (sellingTitleEndDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SellingTitleEndDate);
      }
      if (SellingTitleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SellingTitleName);
      }
      if (RateCardDaypartName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RateCardDaypartName);
      }
      if (SellingTitleDaysOfWeekName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SellingTitleDaysOfWeekName);
      }
      if (RateCardTypeName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RateCardTypeName);
      }
      if (SellableInventoryHashKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(SellableInventoryHashKey);
      }
      if (StationHashKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(StationHashKey);
      }
      if (SellingTitleDaysOfWeekHashKey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SellingTitleDaysOfWeekHashKey);
      }
      if (RateCardTypeHashKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RateCardTypeHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sellingTitleStartDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellingTitleStartDate);
      }
      if (sellingTitleEndDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellingTitleEndDate);
      }
      if (SellingTitleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleName);
      }
      if (RateCardDaypartName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardDaypartName);
      }
      if (SellingTitleDaysOfWeekName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleDaysOfWeekName);
      }
      if (RateCardTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardTypeName);
      }
      if (SellableInventoryHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellableInventoryHashKey);
      }
      if (StationHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationHashKey);
      }
      if (SellingTitleDaysOfWeekHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleDaysOfWeekHashKey);
      }
      if (RateCardTypeHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardTypeHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellableInventoryDto other) {
      if (other == null) {
        return;
      }
      if (other.sellingTitleStartDate_ != null) {
        if (sellingTitleStartDate_ == null) {
          sellingTitleStartDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        SellingTitleStartDate.MergeFrom(other.SellingTitleStartDate);
      }
      if (other.sellingTitleEndDate_ != null) {
        if (sellingTitleEndDate_ == null) {
          sellingTitleEndDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        SellingTitleEndDate.MergeFrom(other.SellingTitleEndDate);
      }
      if (other.SellingTitleName.Length != 0) {
        SellingTitleName = other.SellingTitleName;
      }
      if (other.RateCardDaypartName.Length != 0) {
        RateCardDaypartName = other.RateCardDaypartName;
      }
      if (other.SellingTitleDaysOfWeekName.Length != 0) {
        SellingTitleDaysOfWeekName = other.SellingTitleDaysOfWeekName;
      }
      if (other.RateCardTypeName.Length != 0) {
        RateCardTypeName = other.RateCardTypeName;
      }
      if (other.SellableInventoryHashKey.Length != 0) {
        SellableInventoryHashKey = other.SellableInventoryHashKey;
      }
      if (other.StationHashKey.Length != 0) {
        StationHashKey = other.StationHashKey;
      }
      if (other.SellingTitleDaysOfWeekHashKey.Length != 0) {
        SellingTitleDaysOfWeekHashKey = other.SellingTitleDaysOfWeekHashKey;
      }
      if (other.RateCardTypeHashKey.Length != 0) {
        RateCardTypeHashKey = other.RateCardTypeHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (sellingTitleStartDate_ == null) {
              sellingTitleStartDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(sellingTitleStartDate_);
            break;
          }
          case 18: {
            if (sellingTitleEndDate_ == null) {
              sellingTitleEndDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(sellingTitleEndDate_);
            break;
          }
          case 26: {
            SellingTitleName = input.ReadString();
            break;
          }
          case 34: {
            RateCardDaypartName = input.ReadString();
            break;
          }
          case 42: {
            SellingTitleDaysOfWeekName = input.ReadString();
            break;
          }
          case 50: {
            RateCardTypeName = input.ReadString();
            break;
          }
          case 58: {
            SellableInventoryHashKey = input.ReadString();
            break;
          }
          case 66: {
            StationHashKey = input.ReadString();
            break;
          }
          case 74: {
            SellingTitleDaysOfWeekHashKey = input.ReadString();
            break;
          }
          case 82: {
            RateCardTypeHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellingTitleDeleteRequest : pb::IMessage<SellingTitleDeleteRequest> {
    private static readonly pb::MessageParser<SellingTitleDeleteRequest> _parser = new pb::MessageParser<SellingTitleDeleteRequest>(() => new SellingTitleDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDeleteRequest(SellingTitleDeleteRequest other) : this() {
      sellingTitleHashKey_ = other.sellingTitleHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDeleteRequest Clone() {
      return new SellingTitleDeleteRequest(this);
    }

    /// <summary>Field number for the "SellingTitleHashKey" field.</summary>
    public const int SellingTitleHashKeyFieldNumber = 1;
    private string sellingTitleHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleHashKey {
      get { return sellingTitleHashKey_; }
      set {
        sellingTitleHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SellingTitleHashKey != other.SellingTitleHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SellingTitleHashKey.Length != 0) hash ^= SellingTitleHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SellingTitleHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SellingTitleHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SellingTitleHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.SellingTitleHashKey.Length != 0) {
        SellingTitleHashKey = other.SellingTitleHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SellingTitleHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellingTitleDeleteResponse : pb::IMessage<SellingTitleDeleteResponse> {
    private static readonly pb::MessageParser<SellingTitleDeleteResponse> _parser = new pb::MessageParser<SellingTitleDeleteResponse>(() => new SellingTitleDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDeleteResponse(SellingTitleDeleteResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDeleteResponse Clone() {
      return new SellingTitleDeleteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleDeleteResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StationDeleteRequest : pb::IMessage<StationDeleteRequest> {
    private static readonly pb::MessageParser<StationDeleteRequest> _parser = new pb::MessageParser<StationDeleteRequest>(() => new StationDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationDeleteRequest(StationDeleteRequest other) : this() {
      stationHashKey_ = other.stationHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationDeleteRequest Clone() {
      return new StationDeleteRequest(this);
    }

    /// <summary>Field number for the "StationHashKey" field.</summary>
    public const int StationHashKeyFieldNumber = 1;
    private string stationHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationHashKey {
      get { return stationHashKey_; }
      set {
        stationHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationHashKey != other.StationHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StationHashKey.Length != 0) hash ^= StationHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StationHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StationHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StationHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.StationHashKey.Length != 0) {
        StationHashKey = other.StationHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StationHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StationDeleteResponse : pb::IMessage<StationDeleteResponse> {
    private static readonly pb::MessageParser<StationDeleteResponse> _parser = new pb::MessageParser<StationDeleteResponse>(() => new StationDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationDeleteResponse(StationDeleteResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationDeleteResponse Clone() {
      return new StationDeleteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationDeleteResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StationGroupDeleteRequest : pb::IMessage<StationGroupDeleteRequest> {
    private static readonly pb::MessageParser<StationGroupDeleteRequest> _parser = new pb::MessageParser<StationGroupDeleteRequest>(() => new StationGroupDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationGroupDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroupDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroupDeleteRequest(StationGroupDeleteRequest other) : this() {
      stationGroupHashKey_ = other.stationGroupHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroupDeleteRequest Clone() {
      return new StationGroupDeleteRequest(this);
    }

    /// <summary>Field number for the "StationGroupHashKey" field.</summary>
    public const int StationGroupHashKeyFieldNumber = 1;
    private string stationGroupHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationGroupHashKey {
      get { return stationGroupHashKey_; }
      set {
        stationGroupHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationGroupDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationGroupDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationGroupHashKey != other.StationGroupHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StationGroupHashKey.Length != 0) hash ^= StationGroupHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StationGroupHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StationGroupHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StationGroupHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationGroupHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationGroupDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.StationGroupHashKey.Length != 0) {
        StationGroupHashKey = other.StationGroupHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StationGroupHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StationGroupDeleteResponse : pb::IMessage<StationGroupDeleteResponse> {
    private static readonly pb::MessageParser<StationGroupDeleteResponse> _parser = new pb::MessageParser<StationGroupDeleteResponse>(() => new StationGroupDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationGroupDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroupDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroupDeleteResponse(StationGroupDeleteResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroupDeleteResponse Clone() {
      return new StationGroupDeleteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationGroupDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationGroupDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationGroupDeleteResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RateCardDeleteRequest : pb::IMessage<RateCardDeleteRequest> {
    private static readonly pb::MessageParser<RateCardDeleteRequest> _parser = new pb::MessageParser<RateCardDeleteRequest>(() => new RateCardDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDeleteRequest(RateCardDeleteRequest other) : this() {
      rateCardHashKey_ = other.rateCardHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDeleteRequest Clone() {
      return new RateCardDeleteRequest(this);
    }

    /// <summary>Field number for the "RateCardHashKey" field.</summary>
    public const int RateCardHashKeyFieldNumber = 1;
    private string rateCardHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardHashKey {
      get { return rateCardHashKey_; }
      set {
        rateCardHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RateCardHashKey != other.RateCardHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RateCardHashKey.Length != 0) hash ^= RateCardHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RateCardHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RateCardHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RateCardHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.RateCardHashKey.Length != 0) {
        RateCardHashKey = other.RateCardHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RateCardHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RateCardDeleteResponse : pb::IMessage<RateCardDeleteResponse> {
    private static readonly pb::MessageParser<RateCardDeleteResponse> _parser = new pb::MessageParser<RateCardDeleteResponse>(() => new RateCardDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDeleteResponse(RateCardDeleteResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDeleteResponse Clone() {
      return new RateCardDeleteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardDeleteResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RateCardDaypartDeleteRequest : pb::IMessage<RateCardDaypartDeleteRequest> {
    private static readonly pb::MessageParser<RateCardDaypartDeleteRequest> _parser = new pb::MessageParser<RateCardDaypartDeleteRequest>(() => new RateCardDaypartDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardDaypartDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypartDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypartDeleteRequest(RateCardDaypartDeleteRequest other) : this() {
      rateCardDaypartHashKey_ = other.rateCardDaypartHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypartDeleteRequest Clone() {
      return new RateCardDaypartDeleteRequest(this);
    }

    /// <summary>Field number for the "RateCardDaypartHashKey" field.</summary>
    public const int RateCardDaypartHashKeyFieldNumber = 1;
    private string rateCardDaypartHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardDaypartHashKey {
      get { return rateCardDaypartHashKey_; }
      set {
        rateCardDaypartHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardDaypartDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardDaypartDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RateCardDaypartHashKey != other.RateCardDaypartHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RateCardDaypartHashKey.Length != 0) hash ^= RateCardDaypartHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RateCardDaypartHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RateCardDaypartHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RateCardDaypartHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardDaypartHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardDaypartDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.RateCardDaypartHashKey.Length != 0) {
        RateCardDaypartHashKey = other.RateCardDaypartHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RateCardDaypartHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RateCardDaypartDeleteResponse : pb::IMessage<RateCardDaypartDeleteResponse> {
    private static readonly pb::MessageParser<RateCardDaypartDeleteResponse> _parser = new pb::MessageParser<RateCardDaypartDeleteResponse>(() => new RateCardDaypartDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardDaypartDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypartDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypartDeleteResponse(RateCardDaypartDeleteResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypartDeleteResponse Clone() {
      return new RateCardDaypartDeleteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardDaypartDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardDaypartDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardDaypartDeleteResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RateCardTypeDeleteRequest : pb::IMessage<RateCardTypeDeleteRequest> {
    private static readonly pb::MessageParser<RateCardTypeDeleteRequest> _parser = new pb::MessageParser<RateCardTypeDeleteRequest>(() => new RateCardTypeDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardTypeDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardTypeDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardTypeDeleteRequest(RateCardTypeDeleteRequest other) : this() {
      rateCardTypeHashKey_ = other.rateCardTypeHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardTypeDeleteRequest Clone() {
      return new RateCardTypeDeleteRequest(this);
    }

    /// <summary>Field number for the "RateCardTypeHashKey" field.</summary>
    public const int RateCardTypeHashKeyFieldNumber = 1;
    private string rateCardTypeHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardTypeHashKey {
      get { return rateCardTypeHashKey_; }
      set {
        rateCardTypeHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardTypeDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardTypeDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RateCardTypeHashKey != other.RateCardTypeHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RateCardTypeHashKey.Length != 0) hash ^= RateCardTypeHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RateCardTypeHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RateCardTypeHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RateCardTypeHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardTypeHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardTypeDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.RateCardTypeHashKey.Length != 0) {
        RateCardTypeHashKey = other.RateCardTypeHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RateCardTypeHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RateCardTypeDeleteResponse : pb::IMessage<RateCardTypeDeleteResponse> {
    private static readonly pb::MessageParser<RateCardTypeDeleteResponse> _parser = new pb::MessageParser<RateCardTypeDeleteResponse>(() => new RateCardTypeDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardTypeDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardTypeDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardTypeDeleteResponse(RateCardTypeDeleteResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardTypeDeleteResponse Clone() {
      return new RateCardTypeDeleteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardTypeDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardTypeDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardTypeDeleteResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SellingTitleTimeRangeDeleteRequest : pb::IMessage<SellingTitleTimeRangeDeleteRequest> {
    private static readonly pb::MessageParser<SellingTitleTimeRangeDeleteRequest> _parser = new pb::MessageParser<SellingTitleTimeRangeDeleteRequest>(() => new SellingTitleTimeRangeDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleTimeRangeDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRangeDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRangeDeleteRequest(SellingTitleTimeRangeDeleteRequest other) : this() {
      sellingTitleTimeRangeHashKey_ = other.sellingTitleTimeRangeHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRangeDeleteRequest Clone() {
      return new SellingTitleTimeRangeDeleteRequest(this);
    }

    /// <summary>Field number for the "SellingTitleTimeRangeHashKey" field.</summary>
    public const int SellingTitleTimeRangeHashKeyFieldNumber = 1;
    private string sellingTitleTimeRangeHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleTimeRangeHashKey {
      get { return sellingTitleTimeRangeHashKey_; }
      set {
        sellingTitleTimeRangeHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleTimeRangeDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleTimeRangeDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SellingTitleTimeRangeHashKey != other.SellingTitleTimeRangeHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SellingTitleTimeRangeHashKey.Length != 0) hash ^= SellingTitleTimeRangeHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SellingTitleTimeRangeHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SellingTitleTimeRangeHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SellingTitleTimeRangeHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleTimeRangeHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleTimeRangeDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.SellingTitleTimeRangeHashKey.Length != 0) {
        SellingTitleTimeRangeHashKey = other.SellingTitleTimeRangeHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SellingTitleTimeRangeHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellingTitleTimeRangeDeleteResponse : pb::IMessage<SellingTitleTimeRangeDeleteResponse> {
    private static readonly pb::MessageParser<SellingTitleTimeRangeDeleteResponse> _parser = new pb::MessageParser<SellingTitleTimeRangeDeleteResponse>(() => new SellingTitleTimeRangeDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleTimeRangeDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRangeDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRangeDeleteResponse(SellingTitleTimeRangeDeleteResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRangeDeleteResponse Clone() {
      return new SellingTitleTimeRangeDeleteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleTimeRangeDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleTimeRangeDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleTimeRangeDeleteResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SellingTitleDaysOfWeekDeleteRequest : pb::IMessage<SellingTitleDaysOfWeekDeleteRequest> {
    private static readonly pb::MessageParser<SellingTitleDaysOfWeekDeleteRequest> _parser = new pb::MessageParser<SellingTitleDaysOfWeekDeleteRequest>(() => new SellingTitleDaysOfWeekDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleDaysOfWeekDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeekDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeekDeleteRequest(SellingTitleDaysOfWeekDeleteRequest other) : this() {
      sellingTitleDaysOfWeekHashKey_ = other.sellingTitleDaysOfWeekHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeekDeleteRequest Clone() {
      return new SellingTitleDaysOfWeekDeleteRequest(this);
    }

    /// <summary>Field number for the "SellingTitleDaysOfWeekHashKey" field.</summary>
    public const int SellingTitleDaysOfWeekHashKeyFieldNumber = 1;
    private string sellingTitleDaysOfWeekHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleDaysOfWeekHashKey {
      get { return sellingTitleDaysOfWeekHashKey_; }
      set {
        sellingTitleDaysOfWeekHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleDaysOfWeekDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleDaysOfWeekDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SellingTitleDaysOfWeekHashKey != other.SellingTitleDaysOfWeekHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SellingTitleDaysOfWeekHashKey.Length != 0) hash ^= SellingTitleDaysOfWeekHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SellingTitleDaysOfWeekHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SellingTitleDaysOfWeekHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SellingTitleDaysOfWeekHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleDaysOfWeekHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleDaysOfWeekDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.SellingTitleDaysOfWeekHashKey.Length != 0) {
        SellingTitleDaysOfWeekHashKey = other.SellingTitleDaysOfWeekHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SellingTitleDaysOfWeekHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellingTitleDaysOfWeekDeleteResponse : pb::IMessage<SellingTitleDaysOfWeekDeleteResponse> {
    private static readonly pb::MessageParser<SellingTitleDaysOfWeekDeleteResponse> _parser = new pb::MessageParser<SellingTitleDaysOfWeekDeleteResponse>(() => new SellingTitleDaysOfWeekDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleDaysOfWeekDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeekDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeekDeleteResponse(SellingTitleDaysOfWeekDeleteResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeekDeleteResponse Clone() {
      return new SellingTitleDaysOfWeekDeleteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleDaysOfWeekDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleDaysOfWeekDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleDaysOfWeekDeleteResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SellableInventoryPeriodDeleteRequest : pb::IMessage<SellableInventoryPeriodDeleteRequest> {
    private static readonly pb::MessageParser<SellableInventoryPeriodDeleteRequest> _parser = new pb::MessageParser<SellableInventoryPeriodDeleteRequest>(() => new SellableInventoryPeriodDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellableInventoryPeriodDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriodDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriodDeleteRequest(SellableInventoryPeriodDeleteRequest other) : this() {
      sellableInventoryPeriodHashKey_ = other.sellableInventoryPeriodHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriodDeleteRequest Clone() {
      return new SellableInventoryPeriodDeleteRequest(this);
    }

    /// <summary>Field number for the "SellableInventoryPeriodHashKey" field.</summary>
    public const int SellableInventoryPeriodHashKeyFieldNumber = 1;
    private string sellableInventoryPeriodHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellableInventoryPeriodHashKey {
      get { return sellableInventoryPeriodHashKey_; }
      set {
        sellableInventoryPeriodHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellableInventoryPeriodDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellableInventoryPeriodDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SellableInventoryPeriodHashKey != other.SellableInventoryPeriodHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SellableInventoryPeriodHashKey.Length != 0) hash ^= SellableInventoryPeriodHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SellableInventoryPeriodHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SellableInventoryPeriodHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SellableInventoryPeriodHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellableInventoryPeriodHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellableInventoryPeriodDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.SellableInventoryPeriodHashKey.Length != 0) {
        SellableInventoryPeriodHashKey = other.SellableInventoryPeriodHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SellableInventoryPeriodHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellableInventoryPeriodDeleteResponse : pb::IMessage<SellableInventoryPeriodDeleteResponse> {
    private static readonly pb::MessageParser<SellableInventoryPeriodDeleteResponse> _parser = new pb::MessageParser<SellableInventoryPeriodDeleteResponse>(() => new SellableInventoryPeriodDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellableInventoryPeriodDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriodDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriodDeleteResponse(SellableInventoryPeriodDeleteResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriodDeleteResponse Clone() {
      return new SellableInventoryPeriodDeleteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellableInventoryPeriodDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellableInventoryPeriodDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellableInventoryPeriodDeleteResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SellableInventoryDeleteRequest : pb::IMessage<SellableInventoryDeleteRequest> {
    private static readonly pb::MessageParser<SellableInventoryDeleteRequest> _parser = new pb::MessageParser<SellableInventoryDeleteRequest>(() => new SellableInventoryDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellableInventoryDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryDeleteRequest(SellableInventoryDeleteRequest other) : this() {
      sellableInventoryHashKey_ = other.sellableInventoryHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryDeleteRequest Clone() {
      return new SellableInventoryDeleteRequest(this);
    }

    /// <summary>Field number for the "SellableInventoryHashKey" field.</summary>
    public const int SellableInventoryHashKeyFieldNumber = 1;
    private string sellableInventoryHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellableInventoryHashKey {
      get { return sellableInventoryHashKey_; }
      set {
        sellableInventoryHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellableInventoryDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellableInventoryDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SellableInventoryHashKey != other.SellableInventoryHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SellableInventoryHashKey.Length != 0) hash ^= SellableInventoryHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SellableInventoryHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SellableInventoryHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SellableInventoryHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellableInventoryHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellableInventoryDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.SellableInventoryHashKey.Length != 0) {
        SellableInventoryHashKey = other.SellableInventoryHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SellableInventoryHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellableInventoryDeleteResponse : pb::IMessage<SellableInventoryDeleteResponse> {
    private static readonly pb::MessageParser<SellableInventoryDeleteResponse> _parser = new pb::MessageParser<SellableInventoryDeleteResponse>(() => new SellableInventoryDeleteResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellableInventoryDeleteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryDeleteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryDeleteResponse(SellableInventoryDeleteResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryDeleteResponse Clone() {
      return new SellableInventoryDeleteResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellableInventoryDeleteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellableInventoryDeleteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellableInventoryDeleteResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SellingTitleAddUpdateRequest : pb::IMessage<SellingTitleAddUpdateRequest> {
    private static readonly pb::MessageParser<SellingTitleAddUpdateRequest> _parser = new pb::MessageParser<SellingTitleAddUpdateRequest>(() => new SellingTitleAddUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleAddUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleAddUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleAddUpdateRequest(SellingTitleAddUpdateRequest other) : this() {
      SellingTitle = other.sellingTitle_ != null ? other.SellingTitle.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleAddUpdateRequest Clone() {
      return new SellingTitleAddUpdateRequest(this);
    }

    /// <summary>Field number for the "SellingTitle" field.</summary>
    public const int SellingTitleFieldNumber = 1;
    private global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitle sellingTitle_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitle SellingTitle {
      get { return sellingTitle_; }
      set {
        sellingTitle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleAddUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleAddUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SellingTitle, other.SellingTitle)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sellingTitle_ != null) hash ^= SellingTitle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sellingTitle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SellingTitle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sellingTitle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellingTitle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleAddUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.sellingTitle_ != null) {
        if (sellingTitle_ == null) {
          sellingTitle_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitle();
        }
        SellingTitle.MergeFrom(other.SellingTitle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (sellingTitle_ == null) {
              sellingTitle_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitle();
            }
            input.ReadMessage(sellingTitle_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellingTitleAddUpdateResponse : pb::IMessage<SellingTitleAddUpdateResponse> {
    private static readonly pb::MessageParser<SellingTitleAddUpdateResponse> _parser = new pb::MessageParser<SellingTitleAddUpdateResponse>(() => new SellingTitleAddUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleAddUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleAddUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleAddUpdateResponse(SellingTitleAddUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleAddUpdateResponse Clone() {
      return new SellingTitleAddUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleAddUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleAddUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleAddUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StationAddUpdateRequest : pb::IMessage<StationAddUpdateRequest> {
    private static readonly pb::MessageParser<StationAddUpdateRequest> _parser = new pb::MessageParser<StationAddUpdateRequest>(() => new StationAddUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationAddUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationAddUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationAddUpdateRequest(StationAddUpdateRequest other) : this() {
      Station = other.station_ != null ? other.Station.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationAddUpdateRequest Clone() {
      return new StationAddUpdateRequest(this);
    }

    /// <summary>Field number for the "Station" field.</summary>
    public const int StationFieldNumber = 1;
    private global::Videa.SellableInventoryMartNS.Service.Proto.Types.Station station_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Videa.SellableInventoryMartNS.Service.Proto.Types.Station Station {
      get { return station_; }
      set {
        station_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationAddUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationAddUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Station, other.Station)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (station_ != null) hash ^= Station.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (station_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Station);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (station_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Station);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationAddUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.station_ != null) {
        if (station_ == null) {
          station_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.Station();
        }
        Station.MergeFrom(other.Station);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (station_ == null) {
              station_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.Station();
            }
            input.ReadMessage(station_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StationAddUpdateResponse : pb::IMessage<StationAddUpdateResponse> {
    private static readonly pb::MessageParser<StationAddUpdateResponse> _parser = new pb::MessageParser<StationAddUpdateResponse>(() => new StationAddUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationAddUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationAddUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationAddUpdateResponse(StationAddUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationAddUpdateResponse Clone() {
      return new StationAddUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationAddUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationAddUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationAddUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StationGroupAddUpdateRequest : pb::IMessage<StationGroupAddUpdateRequest> {
    private static readonly pb::MessageParser<StationGroupAddUpdateRequest> _parser = new pb::MessageParser<StationGroupAddUpdateRequest>(() => new StationGroupAddUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationGroupAddUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroupAddUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroupAddUpdateRequest(StationGroupAddUpdateRequest other) : this() {
      StationGroup = other.stationGroup_ != null ? other.StationGroup.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroupAddUpdateRequest Clone() {
      return new StationGroupAddUpdateRequest(this);
    }

    /// <summary>Field number for the "StationGroup" field.</summary>
    public const int StationGroupFieldNumber = 1;
    private global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroup stationGroup_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroup StationGroup {
      get { return stationGroup_; }
      set {
        stationGroup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationGroupAddUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationGroupAddUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StationGroup, other.StationGroup)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stationGroup_ != null) hash ^= StationGroup.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stationGroup_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StationGroup);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stationGroup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StationGroup);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationGroupAddUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.stationGroup_ != null) {
        if (stationGroup_ == null) {
          stationGroup_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroup();
        }
        StationGroup.MergeFrom(other.StationGroup);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stationGroup_ == null) {
              stationGroup_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroup();
            }
            input.ReadMessage(stationGroup_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StationGroupAddUpdateResponse : pb::IMessage<StationGroupAddUpdateResponse> {
    private static readonly pb::MessageParser<StationGroupAddUpdateResponse> _parser = new pb::MessageParser<StationGroupAddUpdateResponse>(() => new StationGroupAddUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StationGroupAddUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroupAddUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroupAddUpdateResponse(StationGroupAddUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StationGroupAddUpdateResponse Clone() {
      return new StationGroupAddUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StationGroupAddUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StationGroupAddUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StationGroupAddUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RateCardAddUpdateRequest : pb::IMessage<RateCardAddUpdateRequest> {
    private static readonly pb::MessageParser<RateCardAddUpdateRequest> _parser = new pb::MessageParser<RateCardAddUpdateRequest>(() => new RateCardAddUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardAddUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardAddUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardAddUpdateRequest(RateCardAddUpdateRequest other) : this() {
      RateCard = other.rateCard_ != null ? other.RateCard.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardAddUpdateRequest Clone() {
      return new RateCardAddUpdateRequest(this);
    }

    /// <summary>Field number for the "RateCard" field.</summary>
    public const int RateCardFieldNumber = 1;
    private global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard rateCard_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard RateCard {
      get { return rateCard_; }
      set {
        rateCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardAddUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardAddUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RateCard, other.RateCard)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rateCard_ != null) hash ^= RateCard.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rateCard_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RateCard);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rateCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RateCard);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardAddUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.rateCard_ != null) {
        if (rateCard_ == null) {
          rateCard_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard();
        }
        RateCard.MergeFrom(other.RateCard);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rateCard_ == null) {
              rateCard_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard();
            }
            input.ReadMessage(rateCard_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RateCardAddUpdateResponse : pb::IMessage<RateCardAddUpdateResponse> {
    private static readonly pb::MessageParser<RateCardAddUpdateResponse> _parser = new pb::MessageParser<RateCardAddUpdateResponse>(() => new RateCardAddUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardAddUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardAddUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardAddUpdateResponse(RateCardAddUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardAddUpdateResponse Clone() {
      return new RateCardAddUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardAddUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardAddUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardAddUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RateCardDaypartAddUpdateRequest : pb::IMessage<RateCardDaypartAddUpdateRequest> {
    private static readonly pb::MessageParser<RateCardDaypartAddUpdateRequest> _parser = new pb::MessageParser<RateCardDaypartAddUpdateRequest>(() => new RateCardDaypartAddUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardDaypartAddUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypartAddUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypartAddUpdateRequest(RateCardDaypartAddUpdateRequest other) : this() {
      RateCardDaypart = other.rateCardDaypart_ != null ? other.RateCardDaypart.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypartAddUpdateRequest Clone() {
      return new RateCardDaypartAddUpdateRequest(this);
    }

    /// <summary>Field number for the "RateCardDaypart" field.</summary>
    public const int RateCardDaypartFieldNumber = 1;
    private global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypart rateCardDaypart_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypart RateCardDaypart {
      get { return rateCardDaypart_; }
      set {
        rateCardDaypart_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardDaypartAddUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardDaypartAddUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RateCardDaypart, other.RateCardDaypart)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rateCardDaypart_ != null) hash ^= RateCardDaypart.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rateCardDaypart_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RateCardDaypart);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rateCardDaypart_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RateCardDaypart);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardDaypartAddUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.rateCardDaypart_ != null) {
        if (rateCardDaypart_ == null) {
          rateCardDaypart_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypart();
        }
        RateCardDaypart.MergeFrom(other.RateCardDaypart);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rateCardDaypart_ == null) {
              rateCardDaypart_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypart();
            }
            input.ReadMessage(rateCardDaypart_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RateCardDaypartAddUpdateResponse : pb::IMessage<RateCardDaypartAddUpdateResponse> {
    private static readonly pb::MessageParser<RateCardDaypartAddUpdateResponse> _parser = new pb::MessageParser<RateCardDaypartAddUpdateResponse>(() => new RateCardDaypartAddUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardDaypartAddUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypartAddUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypartAddUpdateResponse(RateCardDaypartAddUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardDaypartAddUpdateResponse Clone() {
      return new RateCardDaypartAddUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardDaypartAddUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardDaypartAddUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardDaypartAddUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RateCardTypeAddUpdateRequest : pb::IMessage<RateCardTypeAddUpdateRequest> {
    private static readonly pb::MessageParser<RateCardTypeAddUpdateRequest> _parser = new pb::MessageParser<RateCardTypeAddUpdateRequest>(() => new RateCardTypeAddUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardTypeAddUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardTypeAddUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardTypeAddUpdateRequest(RateCardTypeAddUpdateRequest other) : this() {
      RateCardType = other.rateCardType_ != null ? other.RateCardType.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardTypeAddUpdateRequest Clone() {
      return new RateCardTypeAddUpdateRequest(this);
    }

    /// <summary>Field number for the "RateCardType" field.</summary>
    public const int RateCardTypeFieldNumber = 1;
    private global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardType rateCardType_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardType RateCardType {
      get { return rateCardType_; }
      set {
        rateCardType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardTypeAddUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardTypeAddUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RateCardType, other.RateCardType)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rateCardType_ != null) hash ^= RateCardType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rateCardType_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RateCardType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rateCardType_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RateCardType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardTypeAddUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.rateCardType_ != null) {
        if (rateCardType_ == null) {
          rateCardType_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardType();
        }
        RateCardType.MergeFrom(other.RateCardType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rateCardType_ == null) {
              rateCardType_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardType();
            }
            input.ReadMessage(rateCardType_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RateCardTypeAddUpdateResponse : pb::IMessage<RateCardTypeAddUpdateResponse> {
    private static readonly pb::MessageParser<RateCardTypeAddUpdateResponse> _parser = new pb::MessageParser<RateCardTypeAddUpdateResponse>(() => new RateCardTypeAddUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RateCardTypeAddUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardTypeAddUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardTypeAddUpdateResponse(RateCardTypeAddUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RateCardTypeAddUpdateResponse Clone() {
      return new RateCardTypeAddUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RateCardTypeAddUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RateCardTypeAddUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RateCardTypeAddUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SellingTitleTimeRangeAddUpdateRequest : pb::IMessage<SellingTitleTimeRangeAddUpdateRequest> {
    private static readonly pb::MessageParser<SellingTitleTimeRangeAddUpdateRequest> _parser = new pb::MessageParser<SellingTitleTimeRangeAddUpdateRequest>(() => new SellingTitleTimeRangeAddUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleTimeRangeAddUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRangeAddUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRangeAddUpdateRequest(SellingTitleTimeRangeAddUpdateRequest other) : this() {
      SellingTitleTimeRange = other.sellingTitleTimeRange_ != null ? other.SellingTitleTimeRange.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRangeAddUpdateRequest Clone() {
      return new SellingTitleTimeRangeAddUpdateRequest(this);
    }

    /// <summary>Field number for the "SellingTitleTimeRange" field.</summary>
    public const int SellingTitleTimeRangeFieldNumber = 1;
    private global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRange sellingTitleTimeRange_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRange SellingTitleTimeRange {
      get { return sellingTitleTimeRange_; }
      set {
        sellingTitleTimeRange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleTimeRangeAddUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleTimeRangeAddUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SellingTitleTimeRange, other.SellingTitleTimeRange)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sellingTitleTimeRange_ != null) hash ^= SellingTitleTimeRange.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sellingTitleTimeRange_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SellingTitleTimeRange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sellingTitleTimeRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellingTitleTimeRange);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleTimeRangeAddUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.sellingTitleTimeRange_ != null) {
        if (sellingTitleTimeRange_ == null) {
          sellingTitleTimeRange_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRange();
        }
        SellingTitleTimeRange.MergeFrom(other.SellingTitleTimeRange);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (sellingTitleTimeRange_ == null) {
              sellingTitleTimeRange_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRange();
            }
            input.ReadMessage(sellingTitleTimeRange_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellingTitleTimeRangeAddUpdateResponse : pb::IMessage<SellingTitleTimeRangeAddUpdateResponse> {
    private static readonly pb::MessageParser<SellingTitleTimeRangeAddUpdateResponse> _parser = new pb::MessageParser<SellingTitleTimeRangeAddUpdateResponse>(() => new SellingTitleTimeRangeAddUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleTimeRangeAddUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRangeAddUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRangeAddUpdateResponse(SellingTitleTimeRangeAddUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleTimeRangeAddUpdateResponse Clone() {
      return new SellingTitleTimeRangeAddUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleTimeRangeAddUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleTimeRangeAddUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleTimeRangeAddUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SellingTitleDaysOfWeekAddUpdateRequest : pb::IMessage<SellingTitleDaysOfWeekAddUpdateRequest> {
    private static readonly pb::MessageParser<SellingTitleDaysOfWeekAddUpdateRequest> _parser = new pb::MessageParser<SellingTitleDaysOfWeekAddUpdateRequest>(() => new SellingTitleDaysOfWeekAddUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleDaysOfWeekAddUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeekAddUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeekAddUpdateRequest(SellingTitleDaysOfWeekAddUpdateRequest other) : this() {
      SellingTitleDaysOfWeek = other.sellingTitleDaysOfWeek_ != null ? other.SellingTitleDaysOfWeek.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeekAddUpdateRequest Clone() {
      return new SellingTitleDaysOfWeekAddUpdateRequest(this);
    }

    /// <summary>Field number for the "SellingTitleDaysOfWeek" field.</summary>
    public const int SellingTitleDaysOfWeekFieldNumber = 1;
    private global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeek sellingTitleDaysOfWeek_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeek SellingTitleDaysOfWeek {
      get { return sellingTitleDaysOfWeek_; }
      set {
        sellingTitleDaysOfWeek_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleDaysOfWeekAddUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleDaysOfWeekAddUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SellingTitleDaysOfWeek, other.SellingTitleDaysOfWeek)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sellingTitleDaysOfWeek_ != null) hash ^= SellingTitleDaysOfWeek.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sellingTitleDaysOfWeek_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SellingTitleDaysOfWeek);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sellingTitleDaysOfWeek_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellingTitleDaysOfWeek);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleDaysOfWeekAddUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.sellingTitleDaysOfWeek_ != null) {
        if (sellingTitleDaysOfWeek_ == null) {
          sellingTitleDaysOfWeek_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeek();
        }
        SellingTitleDaysOfWeek.MergeFrom(other.SellingTitleDaysOfWeek);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (sellingTitleDaysOfWeek_ == null) {
              sellingTitleDaysOfWeek_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeek();
            }
            input.ReadMessage(sellingTitleDaysOfWeek_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellingTitleDaysOfWeekAddUpdateResponse : pb::IMessage<SellingTitleDaysOfWeekAddUpdateResponse> {
    private static readonly pb::MessageParser<SellingTitleDaysOfWeekAddUpdateResponse> _parser = new pb::MessageParser<SellingTitleDaysOfWeekAddUpdateResponse>(() => new SellingTitleDaysOfWeekAddUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellingTitleDaysOfWeekAddUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeekAddUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeekAddUpdateResponse(SellingTitleDaysOfWeekAddUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellingTitleDaysOfWeekAddUpdateResponse Clone() {
      return new SellingTitleDaysOfWeekAddUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellingTitleDaysOfWeekAddUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellingTitleDaysOfWeekAddUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellingTitleDaysOfWeekAddUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SellableInventoryPeriodAddUpdateRequest : pb::IMessage<SellableInventoryPeriodAddUpdateRequest> {
    private static readonly pb::MessageParser<SellableInventoryPeriodAddUpdateRequest> _parser = new pb::MessageParser<SellableInventoryPeriodAddUpdateRequest>(() => new SellableInventoryPeriodAddUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellableInventoryPeriodAddUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriodAddUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriodAddUpdateRequest(SellableInventoryPeriodAddUpdateRequest other) : this() {
      SellableInventoryPeriod = other.sellableInventoryPeriod_ != null ? other.SellableInventoryPeriod.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriodAddUpdateRequest Clone() {
      return new SellableInventoryPeriodAddUpdateRequest(this);
    }

    /// <summary>Field number for the "SellableInventoryPeriod" field.</summary>
    public const int SellableInventoryPeriodFieldNumber = 1;
    private global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriod sellableInventoryPeriod_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriod SellableInventoryPeriod {
      get { return sellableInventoryPeriod_; }
      set {
        sellableInventoryPeriod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellableInventoryPeriodAddUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellableInventoryPeriodAddUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SellableInventoryPeriod, other.SellableInventoryPeriod)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sellableInventoryPeriod_ != null) hash ^= SellableInventoryPeriod.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sellableInventoryPeriod_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SellableInventoryPeriod);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sellableInventoryPeriod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellableInventoryPeriod);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellableInventoryPeriodAddUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.sellableInventoryPeriod_ != null) {
        if (sellableInventoryPeriod_ == null) {
          sellableInventoryPeriod_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriod();
        }
        SellableInventoryPeriod.MergeFrom(other.SellableInventoryPeriod);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (sellableInventoryPeriod_ == null) {
              sellableInventoryPeriod_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriod();
            }
            input.ReadMessage(sellableInventoryPeriod_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellableInventoryPeriodAddUpdateResponse : pb::IMessage<SellableInventoryPeriodAddUpdateResponse> {
    private static readonly pb::MessageParser<SellableInventoryPeriodAddUpdateResponse> _parser = new pb::MessageParser<SellableInventoryPeriodAddUpdateResponse>(() => new SellableInventoryPeriodAddUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellableInventoryPeriodAddUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriodAddUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriodAddUpdateResponse(SellableInventoryPeriodAddUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryPeriodAddUpdateResponse Clone() {
      return new SellableInventoryPeriodAddUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellableInventoryPeriodAddUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellableInventoryPeriodAddUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellableInventoryPeriodAddUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SellableInventoryAddUpdateRequest : pb::IMessage<SellableInventoryAddUpdateRequest> {
    private static readonly pb::MessageParser<SellableInventoryAddUpdateRequest> _parser = new pb::MessageParser<SellableInventoryAddUpdateRequest>(() => new SellableInventoryAddUpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellableInventoryAddUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryAddUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryAddUpdateRequest(SellableInventoryAddUpdateRequest other) : this() {
      SellableInventory = other.sellableInventory_ != null ? other.SellableInventory.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryAddUpdateRequest Clone() {
      return new SellableInventoryAddUpdateRequest(this);
    }

    /// <summary>Field number for the "SellableInventory" field.</summary>
    public const int SellableInventoryFieldNumber = 1;
    private global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventory sellableInventory_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventory SellableInventory {
      get { return sellableInventory_; }
      set {
        sellableInventory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellableInventoryAddUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellableInventoryAddUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SellableInventory, other.SellableInventory)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (sellableInventory_ != null) hash ^= SellableInventory.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (sellableInventory_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SellableInventory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (sellableInventory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SellableInventory);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellableInventoryAddUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.sellableInventory_ != null) {
        if (sellableInventory_ == null) {
          sellableInventory_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventory();
        }
        SellableInventory.MergeFrom(other.SellableInventory);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (sellableInventory_ == null) {
              sellableInventory_ = new global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventory();
            }
            input.ReadMessage(sellableInventory_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellableInventoryAddUpdateResponse : pb::IMessage<SellableInventoryAddUpdateResponse> {
    private static readonly pb::MessageParser<SellableInventoryAddUpdateResponse> _parser = new pb::MessageParser<SellableInventoryAddUpdateResponse>(() => new SellableInventoryAddUpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellableInventoryAddUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryAddUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryAddUpdateResponse(SellableInventoryAddUpdateResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellableInventoryAddUpdateResponse Clone() {
      return new SellableInventoryAddUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellableInventoryAddUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellableInventoryAddUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellableInventoryAddUpdateResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetRateCardsByStationRequest : pb::IMessage<GetRateCardsByStationRequest> {
    private static readonly pb::MessageParser<GetRateCardsByStationRequest> _parser = new pb::MessageParser<GetRateCardsByStationRequest>(() => new GetRateCardsByStationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRateCardsByStationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRateCardsByStationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRateCardsByStationRequest(GetRateCardsByStationRequest other) : this() {
      stationHashKey_ = other.stationHashKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRateCardsByStationRequest Clone() {
      return new GetRateCardsByStationRequest(this);
    }

    /// <summary>Field number for the "StationHashKey" field.</summary>
    public const int StationHashKeyFieldNumber = 1;
    private string stationHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationHashKey {
      get { return stationHashKey_; }
      set {
        stationHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRateCardsByStationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRateCardsByStationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationHashKey != other.StationHashKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StationHashKey.Length != 0) hash ^= StationHashKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StationHashKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StationHashKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StationHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationHashKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRateCardsByStationRequest other) {
      if (other == null) {
        return;
      }
      if (other.StationHashKey.Length != 0) {
        StationHashKey = other.StationHashKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StationHashKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRateCardsByStationResponse : pb::IMessage<GetRateCardsByStationResponse> {
    private static readonly pb::MessageParser<GetRateCardsByStationResponse> _parser = new pb::MessageParser<GetRateCardsByStationResponse>(() => new GetRateCardsByStationResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRateCardsByStationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRateCardsByStationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRateCardsByStationResponse(GetRateCardsByStationResponse other) : this() {
      rateCard_ = other.rateCard_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRateCardsByStationResponse Clone() {
      return new GetRateCardsByStationResponse(this);
    }

    /// <summary>Field number for the "RateCard" field.</summary>
    public const int RateCardFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard> _repeated_rateCard_codec
        = pb::FieldCodec.ForMessage(10, global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard> rateCard_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard> RateCard {
      get { return rateCard_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRateCardsByStationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRateCardsByStationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rateCard_.Equals(other.rateCard_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rateCard_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rateCard_.WriteTo(output, _repeated_rateCard_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rateCard_.CalculateSize(_repeated_rateCard_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRateCardsByStationResponse other) {
      if (other == null) {
        return;
      }
      rateCard_.Add(other.rateCard_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rateCard_.AddEntriesFrom(input, _repeated_rateCard_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRateCardsByDateRangeRequest : pb::IMessage<GetRateCardsByDateRangeRequest> {
    private static readonly pb::MessageParser<GetRateCardsByDateRangeRequest> _parser = new pb::MessageParser<GetRateCardsByDateRangeRequest>(() => new GetRateCardsByDateRangeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRateCardsByDateRangeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRateCardsByDateRangeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRateCardsByDateRangeRequest(GetRateCardsByDateRangeRequest other) : this() {
      StartDate = other.startDate_ != null ? other.StartDate.Clone() : null;
      EndDate = other.endDate_ != null ? other.EndDate.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRateCardsByDateRangeRequest Clone() {
      return new GetRateCardsByDateRangeRequest(this);
    }

    /// <summary>Field number for the "StartDate" field.</summary>
    public const int StartDateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startDate_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "EndDate" field.</summary>
    public const int EndDateFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endDate_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndDate {
      get { return endDate_; }
      set {
        endDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRateCardsByDateRangeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRateCardsByDateRangeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartDate, other.StartDate)) return false;
      if (!object.Equals(EndDate, other.EndDate)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startDate_ != null) hash ^= StartDate.GetHashCode();
      if (endDate_ != null) hash ^= EndDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (startDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartDate);
      }
      if (endDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartDate);
      }
      if (endDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRateCardsByDateRangeRequest other) {
      if (other == null) {
        return;
      }
      if (other.startDate_ != null) {
        if (startDate_ == null) {
          startDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartDate.MergeFrom(other.StartDate);
      }
      if (other.endDate_ != null) {
        if (endDate_ == null) {
          endDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndDate.MergeFrom(other.EndDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (startDate_ == null) {
              startDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(startDate_);
            break;
          }
          case 18: {
            if (endDate_ == null) {
              endDate_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(endDate_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetRateCardsByDateRangeResponse : pb::IMessage<GetRateCardsByDateRangeResponse> {
    private static readonly pb::MessageParser<GetRateCardsByDateRangeResponse> _parser = new pb::MessageParser<GetRateCardsByDateRangeResponse>(() => new GetRateCardsByDateRangeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRateCardsByDateRangeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRateCardsByDateRangeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRateCardsByDateRangeResponse(GetRateCardsByDateRangeResponse other) : this() {
      rateCard_ = other.rateCard_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRateCardsByDateRangeResponse Clone() {
      return new GetRateCardsByDateRangeResponse(this);
    }

    /// <summary>Field number for the "RateCard" field.</summary>
    public const int RateCardFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard> _repeated_rateCard_codec
        = pb::FieldCodec.ForMessage(10, global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard> rateCard_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard> RateCard {
      get { return rateCard_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRateCardsByDateRangeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRateCardsByDateRangeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rateCard_.Equals(other.rateCard_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rateCard_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rateCard_.WriteTo(output, _repeated_rateCard_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rateCard_.CalculateSize(_repeated_rateCard_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRateCardsByDateRangeResponse other) {
      if (other == null) {
        return;
      }
      rateCard_.Add(other.rateCard_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rateCard_.AddEntriesFrom(input, _repeated_rateCard_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetConfirmedInventoryRequest : pb::IMessage<GetConfirmedInventoryRequest> {
    private static readonly pb::MessageParser<GetConfirmedInventoryRequest> _parser = new pb::MessageParser<GetConfirmedInventoryRequest>(() => new GetConfirmedInventoryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetConfirmedInventoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetConfirmedInventoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetConfirmedInventoryRequest(GetConfirmedInventoryRequest other) : this() {
      stationList_ = other.stationList_;
      rateCardTypeHashKey_ = other.rateCardTypeHashKey_;
      rateCardDaypartList_ = other.rateCardDaypartList_;
      sellingTitleList_ = other.sellingTitleList_;
      broadcastWeekList_ = other.broadcastWeekList_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetConfirmedInventoryRequest Clone() {
      return new GetConfirmedInventoryRequest(this);
    }

    /// <summary>Field number for the "StationList" field.</summary>
    public const int StationListFieldNumber = 1;
    private string stationList_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationList {
      get { return stationList_; }
      set {
        stationList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RateCardTypeHashKey" field.</summary>
    public const int RateCardTypeHashKeyFieldNumber = 2;
    private string rateCardTypeHashKey_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardTypeHashKey {
      get { return rateCardTypeHashKey_; }
      set {
        rateCardTypeHashKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RateCardDaypartList" field.</summary>
    public const int RateCardDaypartListFieldNumber = 3;
    private string rateCardDaypartList_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RateCardDaypartList {
      get { return rateCardDaypartList_; }
      set {
        rateCardDaypartList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SellingTitleList" field.</summary>
    public const int SellingTitleListFieldNumber = 4;
    private string sellingTitleList_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SellingTitleList {
      get { return sellingTitleList_; }
      set {
        sellingTitleList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BroadcastWeekList" field.</summary>
    public const int BroadcastWeekListFieldNumber = 5;
    private string broadcastWeekList_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BroadcastWeekList {
      get { return broadcastWeekList_; }
      set {
        broadcastWeekList_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetConfirmedInventoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetConfirmedInventoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StationList != other.StationList) return false;
      if (RateCardTypeHashKey != other.RateCardTypeHashKey) return false;
      if (RateCardDaypartList != other.RateCardDaypartList) return false;
      if (SellingTitleList != other.SellingTitleList) return false;
      if (BroadcastWeekList != other.BroadcastWeekList) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StationList.Length != 0) hash ^= StationList.GetHashCode();
      if (RateCardTypeHashKey.Length != 0) hash ^= RateCardTypeHashKey.GetHashCode();
      if (RateCardDaypartList.Length != 0) hash ^= RateCardDaypartList.GetHashCode();
      if (SellingTitleList.Length != 0) hash ^= SellingTitleList.GetHashCode();
      if (BroadcastWeekList.Length != 0) hash ^= BroadcastWeekList.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StationList.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StationList);
      }
      if (RateCardTypeHashKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RateCardTypeHashKey);
      }
      if (RateCardDaypartList.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RateCardDaypartList);
      }
      if (SellingTitleList.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SellingTitleList);
      }
      if (BroadcastWeekList.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(BroadcastWeekList);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StationList.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationList);
      }
      if (RateCardTypeHashKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardTypeHashKey);
      }
      if (RateCardDaypartList.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RateCardDaypartList);
      }
      if (SellingTitleList.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SellingTitleList);
      }
      if (BroadcastWeekList.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BroadcastWeekList);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetConfirmedInventoryRequest other) {
      if (other == null) {
        return;
      }
      if (other.StationList.Length != 0) {
        StationList = other.StationList;
      }
      if (other.RateCardTypeHashKey.Length != 0) {
        RateCardTypeHashKey = other.RateCardTypeHashKey;
      }
      if (other.RateCardDaypartList.Length != 0) {
        RateCardDaypartList = other.RateCardDaypartList;
      }
      if (other.SellingTitleList.Length != 0) {
        SellingTitleList = other.SellingTitleList;
      }
      if (other.BroadcastWeekList.Length != 0) {
        BroadcastWeekList = other.BroadcastWeekList;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StationList = input.ReadString();
            break;
          }
          case 18: {
            RateCardTypeHashKey = input.ReadString();
            break;
          }
          case 26: {
            RateCardDaypartList = input.ReadString();
            break;
          }
          case 34: {
            SellingTitleList = input.ReadString();
            break;
          }
          case 42: {
            BroadcastWeekList = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetConfirmedInventoryResponse : pb::IMessage<GetConfirmedInventoryResponse> {
    private static readonly pb::MessageParser<GetConfirmedInventoryResponse> _parser = new pb::MessageParser<GetConfirmedInventoryResponse>(() => new GetConfirmedInventoryResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetConfirmedInventoryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetConfirmedInventoryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetConfirmedInventoryResponse(GetConfirmedInventoryResponse other) : this() {
      sellableInventoryDto_ = other.sellableInventoryDto_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetConfirmedInventoryResponse Clone() {
      return new GetConfirmedInventoryResponse(this);
    }

    /// <summary>Field number for the "SellableInventoryDto" field.</summary>
    public const int SellableInventoryDtoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDto> _repeated_sellableInventoryDto_codec
        = pb::FieldCodec.ForMessage(10, global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDto.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDto> sellableInventoryDto_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDto>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDto> SellableInventoryDto {
      get { return sellableInventoryDto_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetConfirmedInventoryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetConfirmedInventoryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sellableInventoryDto_.Equals(other.sellableInventoryDto_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sellableInventoryDto_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sellableInventoryDto_.WriteTo(output, _repeated_sellableInventoryDto_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sellableInventoryDto_.CalculateSize(_repeated_sellableInventoryDto_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetConfirmedInventoryResponse other) {
      if (other == null) {
        return;
      }
      sellableInventoryDto_.Add(other.sellableInventoryDto_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sellableInventoryDto_.AddEntriesFrom(input, _repeated_sellableInventoryDto_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulkStoreRequest : pb::IMessage<BulkStoreRequest> {
    private static readonly pb::MessageParser<BulkStoreRequest> _parser = new pb::MessageParser<BulkStoreRequest>(() => new BulkStoreRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulkStoreRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulkStoreRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulkStoreRequest(BulkStoreRequest other) : this() {
      sellingTitle_ = other.sellingTitle_.Clone();
      station_ = other.station_.Clone();
      stationGroup_ = other.stationGroup_.Clone();
      rateCard_ = other.rateCard_.Clone();
      rateCardDaypart_ = other.rateCardDaypart_.Clone();
      rateCardType_ = other.rateCardType_.Clone();
      sellingTitleTimeRange_ = other.sellingTitleTimeRange_.Clone();
      sellingTitleDaysOfWeek_ = other.sellingTitleDaysOfWeek_.Clone();
      sellableInventoryPeriod_ = other.sellableInventoryPeriod_.Clone();
      sellableInventory_ = other.sellableInventory_.Clone();
      sellableInventoryDto_ = other.sellableInventoryDto_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulkStoreRequest Clone() {
      return new BulkStoreRequest(this);
    }

    /// <summary>Field number for the "SellingTitle" field.</summary>
    public const int SellingTitleFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitle> _repeated_sellingTitle_codec
        = pb::FieldCodec.ForMessage(10, global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitle.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitle> sellingTitle_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitle>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitle> SellingTitle {
      get { return sellingTitle_; }
    }

    /// <summary>Field number for the "Station" field.</summary>
    public const int StationFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.Station> _repeated_station_codec
        = pb::FieldCodec.ForMessage(18, global::Videa.SellableInventoryMartNS.Service.Proto.Types.Station.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.Station> station_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.Station>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.Station> Station {
      get { return station_; }
    }

    /// <summary>Field number for the "StationGroup" field.</summary>
    public const int StationGroupFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroup> _repeated_stationGroup_codec
        = pb::FieldCodec.ForMessage(26, global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroup.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroup> stationGroup_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroup>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.StationGroup> StationGroup {
      get { return stationGroup_; }
    }

    /// <summary>Field number for the "RateCard" field.</summary>
    public const int RateCardFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard> _repeated_rateCard_codec
        = pb::FieldCodec.ForMessage(34, global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard> rateCard_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCard> RateCard {
      get { return rateCard_; }
    }

    /// <summary>Field number for the "RateCardDaypart" field.</summary>
    public const int RateCardDaypartFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypart> _repeated_rateCardDaypart_codec
        = pb::FieldCodec.ForMessage(42, global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypart.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypart> rateCardDaypart_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypart>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardDaypart> RateCardDaypart {
      get { return rateCardDaypart_; }
    }

    /// <summary>Field number for the "RateCardType" field.</summary>
    public const int RateCardTypeFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardType> _repeated_rateCardType_codec
        = pb::FieldCodec.ForMessage(50, global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardType.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardType> rateCardType_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardType>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.RateCardType> RateCardType {
      get { return rateCardType_; }
    }

    /// <summary>Field number for the "SellingTitleTimeRange" field.</summary>
    public const int SellingTitleTimeRangeFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRange> _repeated_sellingTitleTimeRange_codec
        = pb::FieldCodec.ForMessage(58, global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRange.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRange> sellingTitleTimeRange_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRange>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleTimeRange> SellingTitleTimeRange {
      get { return sellingTitleTimeRange_; }
    }

    /// <summary>Field number for the "SellingTitleDaysOfWeek" field.</summary>
    public const int SellingTitleDaysOfWeekFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeek> _repeated_sellingTitleDaysOfWeek_codec
        = pb::FieldCodec.ForMessage(66, global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeek.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeek> sellingTitleDaysOfWeek_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeek>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellingTitleDaysOfWeek> SellingTitleDaysOfWeek {
      get { return sellingTitleDaysOfWeek_; }
    }

    /// <summary>Field number for the "SellableInventoryPeriod" field.</summary>
    public const int SellableInventoryPeriodFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriod> _repeated_sellableInventoryPeriod_codec
        = pb::FieldCodec.ForMessage(74, global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriod.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriod> sellableInventoryPeriod_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriod>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryPeriod> SellableInventoryPeriod {
      get { return sellableInventoryPeriod_; }
    }

    /// <summary>Field number for the "SellableInventory" field.</summary>
    public const int SellableInventoryFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventory> _repeated_sellableInventory_codec
        = pb::FieldCodec.ForMessage(82, global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventory.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventory> sellableInventory_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventory>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventory> SellableInventory {
      get { return sellableInventory_; }
    }

    /// <summary>Field number for the "SellableInventoryDto" field.</summary>
    public const int SellableInventoryDtoFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDto> _repeated_sellableInventoryDto_codec
        = pb::FieldCodec.ForMessage(90, global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDto.Parser);
    private readonly pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDto> sellableInventoryDto_ = new pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDto>();
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryDto> SellableInventoryDto {
      get { return sellableInventoryDto_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulkStoreRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulkStoreRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sellingTitle_.Equals(other.sellingTitle_)) return false;
      if(!station_.Equals(other.station_)) return false;
      if(!stationGroup_.Equals(other.stationGroup_)) return false;
      if(!rateCard_.Equals(other.rateCard_)) return false;
      if(!rateCardDaypart_.Equals(other.rateCardDaypart_)) return false;
      if(!rateCardType_.Equals(other.rateCardType_)) return false;
      if(!sellingTitleTimeRange_.Equals(other.sellingTitleTimeRange_)) return false;
      if(!sellingTitleDaysOfWeek_.Equals(other.sellingTitleDaysOfWeek_)) return false;
      if(!sellableInventoryPeriod_.Equals(other.sellableInventoryPeriod_)) return false;
      if(!sellableInventory_.Equals(other.sellableInventory_)) return false;
      if(!sellableInventoryDto_.Equals(other.sellableInventoryDto_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sellingTitle_.GetHashCode();
      hash ^= station_.GetHashCode();
      hash ^= stationGroup_.GetHashCode();
      hash ^= rateCard_.GetHashCode();
      hash ^= rateCardDaypart_.GetHashCode();
      hash ^= rateCardType_.GetHashCode();
      hash ^= sellingTitleTimeRange_.GetHashCode();
      hash ^= sellingTitleDaysOfWeek_.GetHashCode();
      hash ^= sellableInventoryPeriod_.GetHashCode();
      hash ^= sellableInventory_.GetHashCode();
      hash ^= sellableInventoryDto_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sellingTitle_.WriteTo(output, _repeated_sellingTitle_codec);
      station_.WriteTo(output, _repeated_station_codec);
      stationGroup_.WriteTo(output, _repeated_stationGroup_codec);
      rateCard_.WriteTo(output, _repeated_rateCard_codec);
      rateCardDaypart_.WriteTo(output, _repeated_rateCardDaypart_codec);
      rateCardType_.WriteTo(output, _repeated_rateCardType_codec);
      sellingTitleTimeRange_.WriteTo(output, _repeated_sellingTitleTimeRange_codec);
      sellingTitleDaysOfWeek_.WriteTo(output, _repeated_sellingTitleDaysOfWeek_codec);
      sellableInventoryPeriod_.WriteTo(output, _repeated_sellableInventoryPeriod_codec);
      sellableInventory_.WriteTo(output, _repeated_sellableInventory_codec);
      sellableInventoryDto_.WriteTo(output, _repeated_sellableInventoryDto_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sellingTitle_.CalculateSize(_repeated_sellingTitle_codec);
      size += station_.CalculateSize(_repeated_station_codec);
      size += stationGroup_.CalculateSize(_repeated_stationGroup_codec);
      size += rateCard_.CalculateSize(_repeated_rateCard_codec);
      size += rateCardDaypart_.CalculateSize(_repeated_rateCardDaypart_codec);
      size += rateCardType_.CalculateSize(_repeated_rateCardType_codec);
      size += sellingTitleTimeRange_.CalculateSize(_repeated_sellingTitleTimeRange_codec);
      size += sellingTitleDaysOfWeek_.CalculateSize(_repeated_sellingTitleDaysOfWeek_codec);
      size += sellableInventoryPeriod_.CalculateSize(_repeated_sellableInventoryPeriod_codec);
      size += sellableInventory_.CalculateSize(_repeated_sellableInventory_codec);
      size += sellableInventoryDto_.CalculateSize(_repeated_sellableInventoryDto_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulkStoreRequest other) {
      if (other == null) {
        return;
      }
      sellingTitle_.Add(other.sellingTitle_);
      station_.Add(other.station_);
      stationGroup_.Add(other.stationGroup_);
      rateCard_.Add(other.rateCard_);
      rateCardDaypart_.Add(other.rateCardDaypart_);
      rateCardType_.Add(other.rateCardType_);
      sellingTitleTimeRange_.Add(other.sellingTitleTimeRange_);
      sellingTitleDaysOfWeek_.Add(other.sellingTitleDaysOfWeek_);
      sellableInventoryPeriod_.Add(other.sellableInventoryPeriod_);
      sellableInventory_.Add(other.sellableInventory_);
      sellableInventoryDto_.Add(other.sellableInventoryDto_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sellingTitle_.AddEntriesFrom(input, _repeated_sellingTitle_codec);
            break;
          }
          case 18: {
            station_.AddEntriesFrom(input, _repeated_station_codec);
            break;
          }
          case 26: {
            stationGroup_.AddEntriesFrom(input, _repeated_stationGroup_codec);
            break;
          }
          case 34: {
            rateCard_.AddEntriesFrom(input, _repeated_rateCard_codec);
            break;
          }
          case 42: {
            rateCardDaypart_.AddEntriesFrom(input, _repeated_rateCardDaypart_codec);
            break;
          }
          case 50: {
            rateCardType_.AddEntriesFrom(input, _repeated_rateCardType_codec);
            break;
          }
          case 58: {
            sellingTitleTimeRange_.AddEntriesFrom(input, _repeated_sellingTitleTimeRange_codec);
            break;
          }
          case 66: {
            sellingTitleDaysOfWeek_.AddEntriesFrom(input, _repeated_sellingTitleDaysOfWeek_codec);
            break;
          }
          case 74: {
            sellableInventoryPeriod_.AddEntriesFrom(input, _repeated_sellableInventoryPeriod_codec);
            break;
          }
          case 82: {
            sellableInventory_.AddEntriesFrom(input, _repeated_sellableInventory_codec);
            break;
          }
          case 90: {
            sellableInventoryDto_.AddEntriesFrom(input, _repeated_sellableInventoryDto_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulkStoreResponse : pb::IMessage<BulkStoreResponse> {
    private static readonly pb::MessageParser<BulkStoreResponse> _parser = new pb::MessageParser<BulkStoreResponse>(() => new BulkStoreResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulkStoreResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Videa.SellableInventoryMartNS.Service.Proto.Types.SellableInventoryMartReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulkStoreResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulkStoreResponse(BulkStoreResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulkStoreResponse Clone() {
      return new BulkStoreResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulkStoreResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulkStoreResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulkStoreResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
