{
  "ProtoSyntax": "proto3",
  "Package": null,
  "Import": [
    "google/protobuf/timestamp.proto",
    "google/protobuf/duration.proto"
  ],
  "ProtoService": [
    {
      "ServiceName": "SellableInventoryMartService",
      "Rpc": [
        {
          "RpcName": "SellingTitleDelete",
          "Request": {
            "MessageName": "SellingTitleDeleteRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "SellingTitleHashKey",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "SellingTitleDeleteResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "StationDelete",
          "Request": {
            "MessageName": "StationDeleteRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "StationHashKey",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "StationDeleteResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "StationGroupDelete",
          "Request": {
            "MessageName": "StationGroupDeleteRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "StationGroupHashKey",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "StationGroupDeleteResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "RateCardDelete",
          "Request": {
            "MessageName": "RateCardDeleteRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "RateCardHashKey",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "RateCardDeleteResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "RateCardDaypartDelete",
          "Request": {
            "MessageName": "RateCardDaypartDeleteRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "RateCardDaypartHashKey",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "RateCardDaypartDeleteResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "RateCardTypeDelete",
          "Request": {
            "MessageName": "RateCardTypeDeleteRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "RateCardTypeHashKey",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "RateCardTypeDeleteResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "SellingTitleTimeRangeDelete",
          "Request": {
            "MessageName": "SellingTitleTimeRangeDeleteRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "SellingTitleTimeRangeHashKey",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "SellingTitleTimeRangeDeleteResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "SellingTitleDaysOfWeekDelete",
          "Request": {
            "MessageName": "SellingTitleDaysOfWeekDeleteRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "SellingTitleDaysOfWeekHashKey",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "SellingTitleDaysOfWeekDeleteResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "SellableInventoryPeriodDelete",
          "Request": {
            "MessageName": "SellableInventoryPeriodDeleteRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "SellableInventoryPeriodHashKey",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "SellableInventoryPeriodDeleteResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "SellableInventoryDelete",
          "Request": {
            "MessageName": "SellableInventoryDeleteRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "SellableInventoryHashKey",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "SellableInventoryDeleteResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "SellingTitleAddUpdate",
          "Request": {
            "MessageName": "SellingTitleAddUpdateRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "SellingTitle",
                "MessageType": "SellingTitle",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "Response": {
            "MessageName": "SellingTitleAddUpdateResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "StationAddUpdate",
          "Request": {
            "MessageName": "StationAddUpdateRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "Station",
                "MessageType": "Station",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "Response": {
            "MessageName": "StationAddUpdateResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "StationGroupAddUpdate",
          "Request": {
            "MessageName": "StationGroupAddUpdateRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "StationGroup",
                "MessageType": "StationGroup",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "Response": {
            "MessageName": "StationGroupAddUpdateResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "RateCardAddUpdate",
          "Request": {
            "MessageName": "RateCardAddUpdateRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "RateCard",
                "MessageType": "RateCard",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "Response": {
            "MessageName": "RateCardAddUpdateResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "RateCardDaypartAddUpdate",
          "Request": {
            "MessageName": "RateCardDaypartAddUpdateRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "RateCardDaypart",
                "MessageType": "RateCardDaypart",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "Response": {
            "MessageName": "RateCardDaypartAddUpdateResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "RateCardTypeAddUpdate",
          "Request": {
            "MessageName": "RateCardTypeAddUpdateRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "RateCardType",
                "MessageType": "RateCardType",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "Response": {
            "MessageName": "RateCardTypeAddUpdateResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "SellingTitleTimeRangeAddUpdate",
          "Request": {
            "MessageName": "SellingTitleTimeRangeAddUpdateRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "SellingTitleTimeRange",
                "MessageType": "SellingTitleTimeRange",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "Response": {
            "MessageName": "SellingTitleTimeRangeAddUpdateResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "SellingTitleDaysOfWeekAddUpdate",
          "Request": {
            "MessageName": "SellingTitleDaysOfWeekAddUpdateRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "SellingTitleDaysOfWeek",
                "MessageType": "SellingTitleDaysOfWeek",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "Response": {
            "MessageName": "SellingTitleDaysOfWeekAddUpdateResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "SellableInventoryPeriodAddUpdate",
          "Request": {
            "MessageName": "SellableInventoryPeriodAddUpdateRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "SellableInventoryPeriod",
                "MessageType": "SellableInventoryPeriod",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "Response": {
            "MessageName": "SellableInventoryPeriodAddUpdateResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "SellableInventoryAddUpdate",
          "Request": {
            "MessageName": "SellableInventoryAddUpdateRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "SellableInventory",
                "MessageType": "SellableInventory",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "Response": {
            "MessageName": "SellableInventoryAddUpdateResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        },
        {
          "RpcName": "GetRateCardsByStation",
          "Request": {
            "MessageName": "GetRateCardsByStationRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "StationHashKey",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "GetRateCardsByStationResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "RateCard",
                "MessageType": "RateCard",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "DtoName": "RateCard"
        },
        {
          "RpcName": "GetRateCardsByDateRange",
          "Request": {
            "MessageName": "GetRateCardsByDateRangeRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "StartDate",
                "MessageType": null,
                "FieldType": 7,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              },
              {
                "FieldName": "EndDate",
                "MessageType": null,
                "FieldType": 7,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "GetRateCardsByDateRangeResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "RateCard",
                "MessageType": "RateCard",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "DtoName": "RateCard"
        },
        {
          "RpcName": "GetConfirmedInventory",
          "Request": {
            "MessageName": "GetConfirmedInventoryRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "StationList",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              },
              {
                "FieldName": "RateCardTypeHashKey",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              },
              {
                "FieldName": "RateCardDaypartList",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              },
              {
                "FieldName": "SellingTitleList",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              },
              {
                "FieldName": "BroadcastWeekList",
                "MessageType": null,
                "FieldType": 5,
                "Required": false,
                "Singular": false,
                "Repeated": false,
                "Optional": false,
                "Comment": null,
                "IsScalar": true
              }
            ]
          },
          "Response": {
            "MessageName": "GetConfirmedInventoryResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "SellableInventoryDto",
                "MessageType": "SellableInventoryDto",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "DtoName": "SellableInventoryDto"
        },
        {
          "RpcName": "BulkStore",
          "Request": {
            "MessageName": "BulkStoreRequest",
            "IsRequest": true,
            "IsResponse": false,
            "HasFields": true,
            "ProtoField": [
              {
                "FieldName": "SellingTitle",
                "MessageType": "SellingTitle",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              },
              {
                "FieldName": "Station",
                "MessageType": "Station",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              },
              {
                "FieldName": "StationGroup",
                "MessageType": "StationGroup",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              },
              {
                "FieldName": "RateCard",
                "MessageType": "RateCard",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              },
              {
                "FieldName": "RateCardDaypart",
                "MessageType": "RateCardDaypart",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              },
              {
                "FieldName": "RateCardType",
                "MessageType": "RateCardType",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              },
              {
                "FieldName": "SellingTitleTimeRange",
                "MessageType": "SellingTitleTimeRange",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              },
              {
                "FieldName": "SellingTitleDaysOfWeek",
                "MessageType": "SellingTitleDaysOfWeek",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              },
              {
                "FieldName": "SellableInventoryPeriod",
                "MessageType": "SellableInventoryPeriod",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              },
              {
                "FieldName": "SellableInventory",
                "MessageType": "SellableInventory",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              },
              {
                "FieldName": "SellableInventoryDto",
                "MessageType": "SellableInventoryDto",
                "FieldType": 0,
                "Required": false,
                "Singular": false,
                "Repeated": true,
                "Optional": false,
                "Comment": null,
                "IsScalar": false
              }
            ]
          },
          "Response": {
            "MessageName": "BulkStoreResponse",
            "IsRequest": false,
            "IsResponse": true,
            "HasFields": false,
            "ProtoField": []
          },
          "DtoName": null
        }
      ]
    }
  ],
  "ProtoMessage": [
    {
      "MessageName": "SellingTitle",
      "IsRequest": true,
      "IsResponse": false,
      "HasFields": true,
      "ProtoField": [
        {
          "FieldName": "SellingTitleHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleSqn",
          "MessageType": null,
          "FieldType": 2,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleStartDate",
          "MessageType": null,
          "FieldType": 7,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleEndDate",
          "MessageType": null,
          "FieldType": 7,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        }
      ]
    },
    {
      "MessageName": "Station",
      "IsRequest": true,
      "IsResponse": false,
      "HasFields": true,
      "ProtoField": [
        {
          "FieldName": "StationHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "StationSqn",
          "MessageType": null,
          "FieldType": 2,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "StationName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "StationCallLetters",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        }
      ]
    },
    {
      "MessageName": "StationGroup",
      "IsRequest": true,
      "IsResponse": false,
      "HasFields": true,
      "ProtoField": [
        {
          "FieldName": "StationGroupHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "StationGroupSqn",
          "MessageType": null,
          "FieldType": 2,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "StationGroupName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        }
      ]
    },
    {
      "MessageName": "RateCard",
      "IsRequest": true,
      "IsResponse": false,
      "HasFields": true,
      "ProtoField": [
        {
          "FieldName": "RateCardHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardSqn",
          "MessageType": null,
          "FieldType": 2,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardStartDate",
          "MessageType": null,
          "FieldType": 7,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardEndDate",
          "MessageType": null,
          "FieldType": 7,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        }
      ]
    },
    {
      "MessageName": "RateCardDaypart",
      "IsRequest": true,
      "IsResponse": false,
      "HasFields": true,
      "ProtoField": [
        {
          "FieldName": "RateCardDaypartHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardDaypartSqn",
          "MessageType": null,
          "FieldType": 2,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardDaypartName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        }
      ]
    },
    {
      "MessageName": "RateCardType",
      "IsRequest": true,
      "IsResponse": false,
      "HasFields": true,
      "ProtoField": [
        {
          "FieldName": "RateCardTypeHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardTypeSqn",
          "MessageType": null,
          "FieldType": 2,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardTypeName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        }
      ]
    },
    {
      "MessageName": "SellingTitleTimeRange",
      "IsRequest": true,
      "IsResponse": false,
      "HasFields": true,
      "ProtoField": [
        {
          "FieldName": "SellingTitleTimeRangeHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "TimeRangeSqn",
          "MessageType": null,
          "FieldType": 2,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleTimeRangeName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        }
      ]
    },
    {
      "MessageName": "SellingTitleDaysOfWeek",
      "IsRequest": true,
      "IsResponse": false,
      "HasFields": true,
      "ProtoField": [
        {
          "FieldName": "SellingTitleDaysOfWeekHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleDaysOfWeekSqn",
          "MessageType": null,
          "FieldType": 2,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleDaysOfWeekName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "Mon",
          "MessageType": null,
          "FieldType": 4,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "Tue",
          "MessageType": null,
          "FieldType": 4,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "Wed",
          "MessageType": null,
          "FieldType": 4,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "Thu",
          "MessageType": null,
          "FieldType": 4,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "Fri",
          "MessageType": null,
          "FieldType": 4,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "Sat",
          "MessageType": null,
          "FieldType": 4,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "Sun",
          "MessageType": null,
          "FieldType": 4,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        }
      ]
    },
    {
      "MessageName": "SellableInventoryPeriod",
      "IsRequest": true,
      "IsResponse": false,
      "HasFields": true,
      "ProtoField": [
        {
          "FieldName": "SellableInventoryPeriodHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellableInventoryPeriodSqn",
          "MessageType": null,
          "FieldType": 2,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellableInventoryPeriodName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellableInventoryPeriodStartDate",
          "MessageType": null,
          "FieldType": 7,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellableInventoryPeriodEndDate",
          "MessageType": null,
          "FieldType": 7,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        }
      ]
    },
    {
      "MessageName": "SellableInventory",
      "IsRequest": true,
      "IsResponse": false,
      "HasFields": true,
      "ProtoField": [
        {
          "FieldName": "SellableInventoryHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellableInventorySqn",
          "MessageType": null,
          "FieldType": 2,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "StationHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "StationGroupHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardDaypartHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardTypeHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleDaysOfWeekHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleTimeRangeHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellableInventoryPeriodHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        }
      ]
    },
    {
      "MessageName": "SellableInventoryDto",
      "IsRequest": false,
      "IsResponse": true,
      "HasFields": true,
      "ProtoField": [
        {
          "FieldName": "SellingTitleStartDate",
          "MessageType": null,
          "FieldType": 7,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleEndDate",
          "MessageType": null,
          "FieldType": 7,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardDaypartName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleDaysOfWeekName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardTypeName",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellableInventoryHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "StationHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "SellingTitleDaysOfWeekHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        },
        {
          "FieldName": "RateCardTypeHashKey",
          "MessageType": null,
          "FieldType": 5,
          "Required": false,
          "Singular": false,
          "Repeated": false,
          "Optional": false,
          "Comment": null,
          "IsScalar": true
        }
      ]
    }
  ],
  "Option": [
    "csharp_namespace = \"Videa.SellableInventoryMartNS.Service.Proto.Types\";"
  ],
  "OwnedByProject": {
    "ProjectIs": 0,
    "TemplateProjectPath": "C:\\Users\\jstephens\\Source\\Repos\\Scaffold\\NetCoreConsoleApp\\NetCoreConsoleApp.csproj",
    "SolutionFolder": null,
    "ProjectFolder": "Code\\Videa.SellableInventoryMart.Service",
    "ProjectID": null,
    "ProjectName": "Videa.SellableInventoryMart.Service",
    "ProjectShortName": "SellableInventoryMart.Service",
    "ProjectType": 0,
    "FileName": "Videa.SellableInventoryMart.Service.csproj",
    "ProjectGuid": "19d28752-ee3f-2857-1d8a-443fed3f722d",
    "ProjectContent": [],
    "Class": [],
    "Interface": [],
    "Path": null,
    "DefaultNamespace": null,
    "AssemblyName": "Videa.SellableInventoryMart.Service",
    "ProjectReference": [
      {
        "ProjectIs": 2,
        "TemplateProjectPath": "C:\\Users\\jstephens\\Source\\Repos\\Scaffold\\NetCoreClassLibrary\\NetCoreClassLibrary.csproj",
        "SolutionFolder": null,
        "ProjectFolder": "Code\\Videa.SellableInventoryMart.Data",
        "ProjectID": null,
        "ProjectName": "Videa.SellableInventoryMart.Data",
        "ProjectShortName": "SellableInventoryMart.Data",
        "ProjectType": 0,
        "FileName": "Videa.SellableInventoryMart.Data.csproj",
        "ProjectGuid": "734546b1-5f16-53a7-3d0d-71b93b678028",
        "ProjectContent": [
          {
            "Content": {
              "InterfaceName": "ISellableInventoryMartDbProvider",
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "Method": [
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "IDbConnection",
                  "ReferencesType": null,
                  "MethodName": "GetConnection",
                  "Parameter": [],
                  "CodeSnippetFile": null,
                  "CodeSnippet": null
                }
              ],
              "NamespaceRef": [
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data.SqlClient"
                  }
                }
              ],
              "InheritsFrom": null,
              "IsGeneric": false
            },
            "Interface": {
              "InterfaceName": "ISellableInventoryMartDbProvider",
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "Method": [
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "IDbConnection",
                  "ReferencesType": null,
                  "MethodName": "GetConnection",
                  "Parameter": [],
                  "CodeSnippetFile": null,
                  "CodeSnippet": null
                }
              ],
              "NamespaceRef": [
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data.SqlClient"
                  }
                }
              ],
              "InheritsFrom": null,
              "IsGeneric": false
            },
            "Class": null,
            "AssemblyInfo": null,
            "File": {
              "FileName": "ISellableInventoryMartDbProvider.cs",
              "Folder": "Providers",
              "Path": "Providers\\ISellableInventoryMartDbProvider.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data.SqlClient"
                  }
                }
              ],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellableInventoryMartDbProvider",
              "Constructor": [
                {
                  "AccessModifier": 0,
                  "ConstructorName": "SellableInventoryMartDbProvider",
                  "Parameter": [
                    {
                      "ParameterName": "connectionString",
                      "Type": "string",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "  if (string.IsNullOrWhiteSpace(connectionString))\r\n            {\r\n                throw new ArgumentException(\"Connection string cannot be null or empty.\", nameof(connectionString));\r\n            }\r\n\r\n            _connectionString = connectionString;\r\n            "
                }
              ],
              "Method": [
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "IDbConnection",
                  "ReferencesType": null,
                  "MethodName": "GetConnection",
                  "Parameter": [],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "return new SqlConnection(_connectionString);"
                }
              ],
              "Property": [],
              "Field": [
                {
                  "AccessModifier": 2,
                  "FieldName": "_connectionString",
                  "FieldType": "string",
                  "ReferencesType": null,
                  "IsReadonly": true,
                  "IsConst": false,
                  "IsStatic": false
                }
              ],
              "InheritsFrom": null,
              "Implements": [
                {
                  "InterfaceName": "ISellableInventoryMartDbProvider",
                  "Namespace": {
                    "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
                  },
                  "Method": [
                    {
                      "AccessModifier": 0,
                      "SignatureOnly": true,
                      "IsOverride": false,
                      "IsAbstract": false,
                      "IsStatic": false,
                      "IsAsync": false,
                      "IsExtensionMethod": false,
                      "ReturnType": "IDbConnection",
                      "ReferencesType": null,
                      "MethodName": "GetConnection",
                      "Parameter": [],
                      "CodeSnippetFile": null,
                      "CodeSnippet": null
                    }
                  ],
                  "NamespaceRef": [
                    {
                      "ReferenceTo": {
                        "NamespaceName": "System.Data"
                      }
                    },
                    {
                      "ReferenceTo": {
                        "NamespaceName": "System.Data.SqlClient"
                      }
                    }
                  ],
                  "InheritsFrom": null,
                  "IsGeneric": false
                }
              ]
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data.SqlClient"
                  }
                }
              ],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellableInventoryMartDbProvider",
              "Constructor": [
                {
                  "AccessModifier": 0,
                  "ConstructorName": "SellableInventoryMartDbProvider",
                  "Parameter": [
                    {
                      "ParameterName": "connectionString",
                      "Type": "string",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "  if (string.IsNullOrWhiteSpace(connectionString))\r\n            {\r\n                throw new ArgumentException(\"Connection string cannot be null or empty.\", nameof(connectionString));\r\n            }\r\n\r\n            _connectionString = connectionString;\r\n            "
                }
              ],
              "Method": [
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "IDbConnection",
                  "ReferencesType": null,
                  "MethodName": "GetConnection",
                  "Parameter": [],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "return new SqlConnection(_connectionString);"
                }
              ],
              "Property": [],
              "Field": [
                {
                  "AccessModifier": 2,
                  "FieldName": "_connectionString",
                  "FieldType": "string",
                  "ReferencesType": null,
                  "IsReadonly": true,
                  "IsConst": false,
                  "IsStatic": false
                }
              ],
              "InheritsFrom": null,
              "Implements": [
                {
                  "InterfaceName": "ISellableInventoryMartDbProvider",
                  "Namespace": {
                    "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
                  },
                  "Method": [
                    {
                      "AccessModifier": 0,
                      "SignatureOnly": true,
                      "IsOverride": false,
                      "IsAbstract": false,
                      "IsStatic": false,
                      "IsAsync": false,
                      "IsExtensionMethod": false,
                      "ReturnType": "IDbConnection",
                      "ReferencesType": null,
                      "MethodName": "GetConnection",
                      "Parameter": [],
                      "CodeSnippetFile": null,
                      "CodeSnippet": null
                    }
                  ],
                  "NamespaceRef": [
                    {
                      "ReferenceTo": {
                        "NamespaceName": "System.Data"
                      }
                    },
                    {
                      "ReferenceTo": {
                        "NamespaceName": "System.Data.SqlClient"
                      }
                    }
                  ],
                  "InheritsFrom": null,
                  "IsGeneric": false
                }
              ]
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "SellableInventoryMartDbProvider.cs",
              "Folder": "Providers",
              "Path": "Providers\\SellableInventoryMartDbProvider.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": true,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "BaseDataService",
              "Constructor": [
                {
                  "AccessModifier": 1,
                  "ConstructorName": "BaseDataService",
                  "Parameter": [
                    {
                      "ParameterName": "dbProvider",
                      "Type": "ISellableInventoryMartDbProvider",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "DbProvider = dbProvider ?? throw new ArgumentException(nameof(dbProvider));"
                }
              ],
              "Method": [],
              "Property": [],
              "Field": [
                {
                  "AccessModifier": 1,
                  "FieldName": "DbProvider",
                  "FieldType": "ISellableInventoryMartDbProvider",
                  "ReferencesType": null,
                  "IsReadonly": true,
                  "IsConst": false,
                  "IsStatic": false
                }
              ],
              "InheritsFrom": null,
              "Implements": []
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": true,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "BaseDataService",
              "Constructor": [
                {
                  "AccessModifier": 1,
                  "ConstructorName": "BaseDataService",
                  "Parameter": [
                    {
                      "ParameterName": "dbProvider",
                      "Type": "ISellableInventoryMartDbProvider",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "DbProvider = dbProvider ?? throw new ArgumentException(nameof(dbProvider));"
                }
              ],
              "Method": [],
              "Property": [],
              "Field": [
                {
                  "AccessModifier": 1,
                  "FieldName": "DbProvider",
                  "FieldType": "ISellableInventoryMartDbProvider",
                  "ReferencesType": null,
                  "IsReadonly": true,
                  "IsConst": false,
                  "IsStatic": false
                }
              ],
              "InheritsFrom": null,
              "Implements": []
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "BaseDataService.cs",
              "Folder": "DataServices\\Base",
              "Path": "DataServices\\Base\\BaseDataService.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellingTitle",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleStartDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleEndDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellingTitle",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleStartDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleEndDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "SellingTitle.cs",
              "Folder": "Entities",
              "Path": "Entities\\SellingTitle.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "Station",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationCallLetters",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 10
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "Station",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationCallLetters",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 10
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "Station.cs",
              "Folder": "Entities",
              "Path": "Entities\\Station.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "StationGroup",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationGroupHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationGroupSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationGroupName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "StationGroup",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationGroupHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationGroupSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationGroupName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "StationGroup.cs",
              "Folder": "Entities",
              "Path": "Entities\\StationGroup.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "RateCard",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardStartDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardEndDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "RateCard",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardStartDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardEndDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "RateCard.cs",
              "Folder": "Entities",
              "Path": "Entities\\RateCard.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "RateCardDaypart",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardDaypartHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardDaypartSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardDaypartName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "RateCardDaypart",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardDaypartHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardDaypartSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardDaypartName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "RateCardDaypart.cs",
              "Folder": "Entities",
              "Path": "Entities\\RateCardDaypart.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "RateCardType",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardTypeHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardTypeSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardTypeName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "RateCardType",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardTypeHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardTypeSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardTypeName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "RateCardType.cs",
              "Folder": "Entities",
              "Path": "Entities\\RateCardType.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellingTitleTimeRange",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleTimeRangeHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "TimeRangeSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleTimeRangeName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellingTitleTimeRange",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleTimeRangeHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "TimeRangeSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleTimeRangeName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "SellingTitleTimeRange.cs",
              "Folder": "Entities",
              "Path": "Entities\\SellingTitleTimeRange.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellingTitleDaysOfWeek",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleDaysOfWeekHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleDaysOfWeekSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleDaysOfWeekName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Mon",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Tue",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Wed",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Thu",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Fri",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Sat",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Sun",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellingTitleDaysOfWeek",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleDaysOfWeekHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleDaysOfWeekSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleDaysOfWeekName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Mon",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Tue",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Wed",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Thu",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Fri",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Sat",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "Sun",
                  "Type": "Boolean",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "SellingTitleDaysOfWeek.cs",
              "Folder": "Entities",
              "Path": "Entities\\SellingTitleDaysOfWeek.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellableInventoryPeriod",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryPeriodHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryPeriodSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryPeriodName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryPeriodStartDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryPeriodEndDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellableInventoryPeriod",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryPeriodHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryPeriodSqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryPeriodName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryPeriodStartDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryPeriodEndDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "SellableInventoryPeriod.cs",
              "Folder": "Entities",
              "Path": "Entities\\SellableInventoryPeriod.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellableInventory",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventorySqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationGroupHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardDaypartHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardTypeHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleDaysOfWeekHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleTimeRangeHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryPeriodHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellableInventory",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventorySqn",
                  "Type": "Int32",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": -1
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationGroupHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardDaypartHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardTypeHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleDaysOfWeekHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleTimeRangeHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryPeriodHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "SellableInventory.cs",
              "Folder": "Entities",
              "Path": "Entities\\SellableInventory.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellableInventoryDto",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleStartDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 8
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleEndDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 8
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardDaypartName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleDaysOfWeekName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardTypeName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleDaysOfWeekHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardTypeHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellableInventoryDto",
              "Constructor": [],
              "Method": [],
              "Property": [
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleStartDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 8
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleEndDate",
                  "Type": "DateTime",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 8
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardDaypartName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleDaysOfWeekName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardTypeName",
                  "Type": "String",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 255
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellableInventoryHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "StationHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "SellingTitleDaysOfWeekHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                },
                {
                  "AccessModifier": 0,
                  "PropertyName": "RateCardTypeHashKey",
                  "Type": "Char[]",
                  "ReferencesType": null,
                  "DefaultValue": null,
                  "MaxLength": 32
                }
              ],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "SellableInventoryDto.cs",
              "Folder": "Entities",
              "Path": "Entities\\SellableInventoryDto.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "InterfaceName": "ISellableInventoryMartDataService",
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "Method": [
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitlehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellingtitlehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationDelete",
                  "Parameter": [
                    {
                      "ParameterName": "stationhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",stationhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationGroupDelete",
                  "Parameter": [
                    {
                      "ParameterName": "stationgrouphashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",stationgrouphashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationGroupDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardDelete",
                  "Parameter": [
                    {
                      "ParameterName": "ratecardhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",ratecardhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardDaypartDelete",
                  "Parameter": [
                    {
                      "ParameterName": "ratecarddayparthashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",ratecarddayparthashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDaypartDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardTypeDelete",
                  "Parameter": [
                    {
                      "ParameterName": "ratecardtypehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtypehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardTypeDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleTimeRangeDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitletimerangehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellingtitletimerangehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleTimeRangeDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleDaysOfWeekDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitledaysofweekhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellingtitledaysofweekhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDaysOfWeekDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryPeriodDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventoryperiodhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventoryperiodhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryPeriodDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventoryhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryHashKey\",sellableinventoryhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitle",
                      "Type": "SellingTitle",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellingtitle.SellingTitleHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleSqn\",sellingtitle.SellingTitleSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleName\",sellingtitle.SellingTitleName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleStartDate\",sellingtitle.SellingTitleStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleEndDate\",sellingtitle.SellingTitleEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "station",
                      "Type": "Station",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",station.StationHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationSqn\",station.StationSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationName\",station.StationName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@StationCallLetters\",station.StationCallLetters, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationGroupAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "stationgroup",
                      "Type": "StationGroup",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",stationgroup.StationGroupHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupSqn\",stationgroup.StationGroupSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupName\",stationgroup.StationGroupName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationGroupAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "ratecard",
                      "Type": "RateCard",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",ratecard.RateCardHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardSqn\",ratecard.RateCardSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardName\",ratecard.RateCardName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@RateCardStartDate\",ratecard.RateCardStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@RateCardEndDate\",ratecard.RateCardEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardDaypartAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "ratecarddaypart",
                      "Type": "RateCardDaypart",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",ratecarddaypart.RateCardDaypartHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartSqn\",ratecarddaypart.RateCardDaypartSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartName\",ratecarddaypart.RateCardDaypartName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDaypartAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardTypeAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "ratecardtype",
                      "Type": "RateCardType",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtype.RateCardTypeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeSqn\",ratecardtype.RateCardTypeSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeName\",ratecardtype.RateCardTypeName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardTypeAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleTimeRangeAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitletimerange",
                      "Type": "SellingTitleTimeRange",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellingtitletimerange.SellingTitleTimeRangeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@TimeRangeSqn\",sellingtitletimerange.TimeRangeSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeName\",sellingtitletimerange.SellingTitleTimeRangeName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleTimeRangeAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleDaysOfWeekAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitledaysofweek",
                      "Type": "SellingTitleDaysOfWeek",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellingtitledaysofweek.SellingTitleDaysOfWeekHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekSqn\",sellingtitledaysofweek.SellingTitleDaysOfWeekSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekName\",sellingtitledaysofweek.SellingTitleDaysOfWeekName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@Mon\",sellingtitledaysofweek.Mon, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Tue\",sellingtitledaysofweek.Tue, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Wed\",sellingtitledaysofweek.Wed, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Thu\",sellingtitledaysofweek.Thu, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Fri\",sellingtitledaysofweek.Fri, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Sat\",sellingtitledaysofweek.Sat, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Sun\",sellingtitledaysofweek.Sun, DbType.Boolean);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDaysOfWeekAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryPeriodAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventoryperiod",
                      "Type": "SellableInventoryPeriod",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventoryperiod.SellableInventoryPeriodHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodSqn\",sellableinventoryperiod.SellableInventoryPeriodSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodName\",sellableinventoryperiod.SellableInventoryPeriodName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodStartDate\",sellableinventoryperiod.SellableInventoryPeriodStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodEndDate\",sellableinventoryperiod.SellableInventoryPeriodEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryPeriodAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventory",
                      "Type": "SellableInventory",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryHashKey\",sellableinventory.SellableInventoryHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventorySqn\",sellableinventory.SellableInventorySqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",sellableinventory.StationHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",sellableinventory.StationGroupHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",sellableinventory.RateCardHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",sellableinventory.RateCardDaypartHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",sellableinventory.RateCardTypeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellableinventory.SellingTitleHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellableinventory.SellingTitleDaysOfWeekHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellableinventory.SellingTitleTimeRangeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventory.SellableInventoryPeriodHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<IList<RateCard>>",
                  "ReferencesType": null,
                  "MethodName": "GetRateCardsByStation",
                  "Parameter": [
                    {
                      "ParameterName": "stationhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",stationhashkey, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<RateCard>(\r\n\t\t\t\t     \"SIMApi.GetRateCardsByStation\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<IList<RateCard>>",
                  "ReferencesType": null,
                  "MethodName": "GetRateCardsByDateRange",
                  "Parameter": [
                    {
                      "ParameterName": "startdate",
                      "Type": "System.DateTime",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "enddate",
                      "Type": "System.DateTime",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StartDate\",startdate, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@EndDate\",enddate, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<RateCard>(\r\n\t\t\t\t     \"SIMApi.GetRateCardsByDateRange\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<IList<SellableInventoryDto>>",
                  "ReferencesType": null,
                  "MethodName": "GetConfirmedInventory",
                  "Parameter": [
                    {
                      "ParameterName": "stationlist",
                      "Type": "object",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "ratecardtypehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "ratecarddaypartlist",
                      "Type": "object",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "sellingtitlelist",
                      "Type": "object",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "broadcastweeklist",
                      "Type": "object",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationList\",stationlist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtypehashkey, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartList\",ratecarddaypartlist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleList\",sellingtitlelist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@BroadcastWeekList\",broadcastweeklist, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<SellableInventoryDto>(\r\n\t\t\t\t     \"SIMApi.GetConfirmedInventory\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
                }
              ],
              "NamespaceRef": [
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data.SqlClient"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Collections.Generic"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Threading.Tasks"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
                  }
                }
              ],
              "InheritsFrom": null,
              "IsGeneric": false
            },
            "Interface": {
              "InterfaceName": "ISellableInventoryMartDataService",
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "Method": [
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitlehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellingtitlehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationDelete",
                  "Parameter": [
                    {
                      "ParameterName": "stationhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",stationhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationGroupDelete",
                  "Parameter": [
                    {
                      "ParameterName": "stationgrouphashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",stationgrouphashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationGroupDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardDelete",
                  "Parameter": [
                    {
                      "ParameterName": "ratecardhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",ratecardhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardDaypartDelete",
                  "Parameter": [
                    {
                      "ParameterName": "ratecarddayparthashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",ratecarddayparthashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDaypartDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardTypeDelete",
                  "Parameter": [
                    {
                      "ParameterName": "ratecardtypehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtypehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardTypeDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleTimeRangeDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitletimerangehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellingtitletimerangehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleTimeRangeDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleDaysOfWeekDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitledaysofweekhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellingtitledaysofweekhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDaysOfWeekDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryPeriodDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventoryperiodhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventoryperiodhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryPeriodDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventoryhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryHashKey\",sellableinventoryhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitle",
                      "Type": "SellingTitle",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellingtitle.SellingTitleHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleSqn\",sellingtitle.SellingTitleSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleName\",sellingtitle.SellingTitleName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleStartDate\",sellingtitle.SellingTitleStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleEndDate\",sellingtitle.SellingTitleEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "station",
                      "Type": "Station",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",station.StationHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationSqn\",station.StationSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationName\",station.StationName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@StationCallLetters\",station.StationCallLetters, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationGroupAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "stationgroup",
                      "Type": "StationGroup",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",stationgroup.StationGroupHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupSqn\",stationgroup.StationGroupSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupName\",stationgroup.StationGroupName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationGroupAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "ratecard",
                      "Type": "RateCard",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",ratecard.RateCardHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardSqn\",ratecard.RateCardSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardName\",ratecard.RateCardName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@RateCardStartDate\",ratecard.RateCardStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@RateCardEndDate\",ratecard.RateCardEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardDaypartAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "ratecarddaypart",
                      "Type": "RateCardDaypart",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",ratecarddaypart.RateCardDaypartHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartSqn\",ratecarddaypart.RateCardDaypartSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartName\",ratecarddaypart.RateCardDaypartName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDaypartAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardTypeAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "ratecardtype",
                      "Type": "RateCardType",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtype.RateCardTypeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeSqn\",ratecardtype.RateCardTypeSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeName\",ratecardtype.RateCardTypeName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardTypeAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleTimeRangeAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitletimerange",
                      "Type": "SellingTitleTimeRange",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellingtitletimerange.SellingTitleTimeRangeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@TimeRangeSqn\",sellingtitletimerange.TimeRangeSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeName\",sellingtitletimerange.SellingTitleTimeRangeName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleTimeRangeAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleDaysOfWeekAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitledaysofweek",
                      "Type": "SellingTitleDaysOfWeek",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellingtitledaysofweek.SellingTitleDaysOfWeekHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekSqn\",sellingtitledaysofweek.SellingTitleDaysOfWeekSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekName\",sellingtitledaysofweek.SellingTitleDaysOfWeekName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@Mon\",sellingtitledaysofweek.Mon, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Tue\",sellingtitledaysofweek.Tue, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Wed\",sellingtitledaysofweek.Wed, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Thu\",sellingtitledaysofweek.Thu, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Fri\",sellingtitledaysofweek.Fri, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Sat\",sellingtitledaysofweek.Sat, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Sun\",sellingtitledaysofweek.Sun, DbType.Boolean);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDaysOfWeekAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryPeriodAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventoryperiod",
                      "Type": "SellableInventoryPeriod",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventoryperiod.SellableInventoryPeriodHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodSqn\",sellableinventoryperiod.SellableInventoryPeriodSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodName\",sellableinventoryperiod.SellableInventoryPeriodName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodStartDate\",sellableinventoryperiod.SellableInventoryPeriodStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodEndDate\",sellableinventoryperiod.SellableInventoryPeriodEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryPeriodAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventory",
                      "Type": "SellableInventory",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryHashKey\",sellableinventory.SellableInventoryHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventorySqn\",sellableinventory.SellableInventorySqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",sellableinventory.StationHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",sellableinventory.StationGroupHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",sellableinventory.RateCardHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",sellableinventory.RateCardDaypartHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",sellableinventory.RateCardTypeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellableinventory.SellingTitleHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellableinventory.SellingTitleDaysOfWeekHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellableinventory.SellingTitleTimeRangeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventory.SellableInventoryPeriodHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<IList<RateCard>>",
                  "ReferencesType": null,
                  "MethodName": "GetRateCardsByStation",
                  "Parameter": [
                    {
                      "ParameterName": "stationhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",stationhashkey, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<RateCard>(\r\n\t\t\t\t     \"SIMApi.GetRateCardsByStation\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<IList<RateCard>>",
                  "ReferencesType": null,
                  "MethodName": "GetRateCardsByDateRange",
                  "Parameter": [
                    {
                      "ParameterName": "startdate",
                      "Type": "System.DateTime",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "enddate",
                      "Type": "System.DateTime",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StartDate\",startdate, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@EndDate\",enddate, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<RateCard>(\r\n\t\t\t\t     \"SIMApi.GetRateCardsByDateRange\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": true,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": false,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<IList<SellableInventoryDto>>",
                  "ReferencesType": null,
                  "MethodName": "GetConfirmedInventory",
                  "Parameter": [
                    {
                      "ParameterName": "stationlist",
                      "Type": "object",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "ratecardtypehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "ratecarddaypartlist",
                      "Type": "object",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "sellingtitlelist",
                      "Type": "object",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "broadcastweeklist",
                      "Type": "object",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationList\",stationlist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtypehashkey, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartList\",ratecarddaypartlist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleList\",sellingtitlelist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@BroadcastWeekList\",broadcastweeklist, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<SellableInventoryDto>(\r\n\t\t\t\t     \"SIMApi.GetConfirmedInventory\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
                }
              ],
              "NamespaceRef": [
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data.SqlClient"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Collections.Generic"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Threading.Tasks"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
                  }
                }
              ],
              "InheritsFrom": null,
              "IsGeneric": false
            },
            "Class": null,
            "AssemblyInfo": null,
            "File": {
              "FileName": "ISellableInventoryMartDataService.cs",
              "Folder": "DataServices",
              "Path": "DataServices\\ISellableInventoryMartDataService.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          },
          {
            "Content": {
              "NamespaceRef": [
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Linq"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Collections.Generic"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Threading.Tasks"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "Dapper"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
                  }
                }
              ],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellableInventoryMartDataService",
              "Constructor": [
                {
                  "AccessModifier": 0,
                  "ConstructorName": "SellableInventoryMartDataService",
                  "Parameter": [
                    {
                      "ParameterName": "dbProvider",
                      "Type": "ISellableInventoryMartDbProvider",
                      "PassToBaseClass": true
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "//empty constructor"
                }
              ],
              "Method": [
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitlehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellingtitlehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationDelete",
                  "Parameter": [
                    {
                      "ParameterName": "stationhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",stationhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationGroupDelete",
                  "Parameter": [
                    {
                      "ParameterName": "stationgrouphashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",stationgrouphashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationGroupDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardDelete",
                  "Parameter": [
                    {
                      "ParameterName": "ratecardhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",ratecardhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardDaypartDelete",
                  "Parameter": [
                    {
                      "ParameterName": "ratecarddayparthashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",ratecarddayparthashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDaypartDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardTypeDelete",
                  "Parameter": [
                    {
                      "ParameterName": "ratecardtypehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtypehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardTypeDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleTimeRangeDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitletimerangehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellingtitletimerangehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleTimeRangeDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleDaysOfWeekDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitledaysofweekhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellingtitledaysofweekhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDaysOfWeekDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryPeriodDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventoryperiodhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventoryperiodhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryPeriodDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventoryhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryHashKey\",sellableinventoryhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitle",
                      "Type": "SellingTitle",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellingtitle.SellingTitleHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleSqn\",sellingtitle.SellingTitleSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleName\",sellingtitle.SellingTitleName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleStartDate\",sellingtitle.SellingTitleStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleEndDate\",sellingtitle.SellingTitleEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "station",
                      "Type": "Station",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",station.StationHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationSqn\",station.StationSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationName\",station.StationName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@StationCallLetters\",station.StationCallLetters, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationGroupAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "stationgroup",
                      "Type": "StationGroup",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",stationgroup.StationGroupHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupSqn\",stationgroup.StationGroupSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupName\",stationgroup.StationGroupName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationGroupAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "ratecard",
                      "Type": "RateCard",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",ratecard.RateCardHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardSqn\",ratecard.RateCardSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardName\",ratecard.RateCardName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@RateCardStartDate\",ratecard.RateCardStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@RateCardEndDate\",ratecard.RateCardEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardDaypartAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "ratecarddaypart",
                      "Type": "RateCardDaypart",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",ratecarddaypart.RateCardDaypartHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartSqn\",ratecarddaypart.RateCardDaypartSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartName\",ratecarddaypart.RateCardDaypartName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDaypartAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardTypeAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "ratecardtype",
                      "Type": "RateCardType",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtype.RateCardTypeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeSqn\",ratecardtype.RateCardTypeSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeName\",ratecardtype.RateCardTypeName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardTypeAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleTimeRangeAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitletimerange",
                      "Type": "SellingTitleTimeRange",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellingtitletimerange.SellingTitleTimeRangeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@TimeRangeSqn\",sellingtitletimerange.TimeRangeSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeName\",sellingtitletimerange.SellingTitleTimeRangeName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleTimeRangeAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleDaysOfWeekAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitledaysofweek",
                      "Type": "SellingTitleDaysOfWeek",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellingtitledaysofweek.SellingTitleDaysOfWeekHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekSqn\",sellingtitledaysofweek.SellingTitleDaysOfWeekSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekName\",sellingtitledaysofweek.SellingTitleDaysOfWeekName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@Mon\",sellingtitledaysofweek.Mon, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Tue\",sellingtitledaysofweek.Tue, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Wed\",sellingtitledaysofweek.Wed, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Thu\",sellingtitledaysofweek.Thu, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Fri\",sellingtitledaysofweek.Fri, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Sat\",sellingtitledaysofweek.Sat, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Sun\",sellingtitledaysofweek.Sun, DbType.Boolean);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDaysOfWeekAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryPeriodAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventoryperiod",
                      "Type": "SellableInventoryPeriod",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventoryperiod.SellableInventoryPeriodHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodSqn\",sellableinventoryperiod.SellableInventoryPeriodSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodName\",sellableinventoryperiod.SellableInventoryPeriodName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodStartDate\",sellableinventoryperiod.SellableInventoryPeriodStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodEndDate\",sellableinventoryperiod.SellableInventoryPeriodEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryPeriodAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventory",
                      "Type": "SellableInventory",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryHashKey\",sellableinventory.SellableInventoryHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventorySqn\",sellableinventory.SellableInventorySqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",sellableinventory.StationHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",sellableinventory.StationGroupHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",sellableinventory.RateCardHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",sellableinventory.RateCardDaypartHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",sellableinventory.RateCardTypeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellableinventory.SellingTitleHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellableinventory.SellingTitleDaysOfWeekHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellableinventory.SellingTitleTimeRangeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventory.SellableInventoryPeriodHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<IList<RateCard>>",
                  "ReferencesType": null,
                  "MethodName": "GetRateCardsByStation",
                  "Parameter": [
                    {
                      "ParameterName": "stationhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",stationhashkey, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<RateCard>(\r\n\t\t\t\t     \"SIMApi.GetRateCardsByStation\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<IList<RateCard>>",
                  "ReferencesType": null,
                  "MethodName": "GetRateCardsByDateRange",
                  "Parameter": [
                    {
                      "ParameterName": "startdate",
                      "Type": "System.DateTime",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "enddate",
                      "Type": "System.DateTime",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StartDate\",startdate, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@EndDate\",enddate, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<RateCard>(\r\n\t\t\t\t     \"SIMApi.GetRateCardsByDateRange\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<IList<SellableInventoryDto>>",
                  "ReferencesType": null,
                  "MethodName": "GetConfirmedInventory",
                  "Parameter": [
                    {
                      "ParameterName": "stationlist",
                      "Type": "object",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "ratecardtypehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "ratecarddaypartlist",
                      "Type": "object",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "sellingtitlelist",
                      "Type": "object",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "broadcastweeklist",
                      "Type": "object",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationList\",stationlist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtypehashkey, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartList\",ratecarddaypartlist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleList\",sellingtitlelist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@BroadcastWeekList\",broadcastweeklist, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<SellableInventoryDto>(\r\n\t\t\t\t     \"SIMApi.GetConfirmedInventory\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
                }
              ],
              "Property": [],
              "Field": [
                {
                  "AccessModifier": 2,
                  "FieldName": "DefaultPageNumber",
                  "FieldType": "int",
                  "ReferencesType": null,
                  "IsReadonly": false,
                  "IsConst": false,
                  "IsStatic": false
                },
                {
                  "AccessModifier": 2,
                  "FieldName": "DefaultPageSize",
                  "FieldType": "int",
                  "ReferencesType": null,
                  "IsReadonly": false,
                  "IsConst": false,
                  "IsStatic": false
                }
              ],
              "InheritsFrom": {
                "NamespaceRef": [],
                "AccessModifier": 0,
                "IsAbstract": false,
                "Namespace": null,
                "IsStatic": false,
                "ClassName": "BaseDataService",
                "Constructor": [],
                "Method": [],
                "Property": [],
                "Field": [],
                "InheritsFrom": null,
                "Implements": []
              },
              "Implements": [
                {
                  "InterfaceName": "ISellableInventoryMartDataService",
                  "Namespace": null,
                  "Method": [],
                  "NamespaceRef": [],
                  "InheritsFrom": null,
                  "IsGeneric": false
                }
              ]
            },
            "Interface": null,
            "Class": {
              "NamespaceRef": [
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Linq"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Collections.Generic"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Threading.Tasks"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "Dapper"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "System.Data"
                  }
                },
                {
                  "ReferenceTo": {
                    "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
                  }
                }
              ],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": {
                "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
              },
              "IsStatic": false,
              "ClassName": "SellableInventoryMartDataService",
              "Constructor": [
                {
                  "AccessModifier": 0,
                  "ConstructorName": "SellableInventoryMartDataService",
                  "Parameter": [
                    {
                      "ParameterName": "dbProvider",
                      "Type": "ISellableInventoryMartDbProvider",
                      "PassToBaseClass": true
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "//empty constructor"
                }
              ],
              "Method": [
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitlehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellingtitlehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationDelete",
                  "Parameter": [
                    {
                      "ParameterName": "stationhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",stationhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationGroupDelete",
                  "Parameter": [
                    {
                      "ParameterName": "stationgrouphashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",stationgrouphashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationGroupDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardDelete",
                  "Parameter": [
                    {
                      "ParameterName": "ratecardhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",ratecardhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardDaypartDelete",
                  "Parameter": [
                    {
                      "ParameterName": "ratecarddayparthashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",ratecarddayparthashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDaypartDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardTypeDelete",
                  "Parameter": [
                    {
                      "ParameterName": "ratecardtypehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtypehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardTypeDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleTimeRangeDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitletimerangehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellingtitletimerangehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleTimeRangeDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleDaysOfWeekDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitledaysofweekhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellingtitledaysofweekhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDaysOfWeekDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryPeriodDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventoryperiodhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventoryperiodhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryPeriodDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryDelete",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventoryhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryHashKey\",sellableinventoryhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitle",
                      "Type": "SellingTitle",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellingtitle.SellingTitleHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleSqn\",sellingtitle.SellingTitleSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleName\",sellingtitle.SellingTitleName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleStartDate\",sellingtitle.SellingTitleStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleEndDate\",sellingtitle.SellingTitleEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "station",
                      "Type": "Station",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",station.StationHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationSqn\",station.StationSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationName\",station.StationName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@StationCallLetters\",station.StationCallLetters, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "StationGroupAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "stationgroup",
                      "Type": "StationGroup",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",stationgroup.StationGroupHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupSqn\",stationgroup.StationGroupSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupName\",stationgroup.StationGroupName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationGroupAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "ratecard",
                      "Type": "RateCard",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",ratecard.RateCardHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardSqn\",ratecard.RateCardSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardName\",ratecard.RateCardName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@RateCardStartDate\",ratecard.RateCardStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@RateCardEndDate\",ratecard.RateCardEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardDaypartAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "ratecarddaypart",
                      "Type": "RateCardDaypart",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",ratecarddaypart.RateCardDaypartHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartSqn\",ratecarddaypart.RateCardDaypartSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartName\",ratecarddaypart.RateCardDaypartName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDaypartAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "RateCardTypeAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "ratecardtype",
                      "Type": "RateCardType",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtype.RateCardTypeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeSqn\",ratecardtype.RateCardTypeSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeName\",ratecardtype.RateCardTypeName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardTypeAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleTimeRangeAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitletimerange",
                      "Type": "SellingTitleTimeRange",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellingtitletimerange.SellingTitleTimeRangeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@TimeRangeSqn\",sellingtitletimerange.TimeRangeSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeName\",sellingtitletimerange.SellingTitleTimeRangeName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleTimeRangeAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellingTitleDaysOfWeekAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellingtitledaysofweek",
                      "Type": "SellingTitleDaysOfWeek",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellingtitledaysofweek.SellingTitleDaysOfWeekHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekSqn\",sellingtitledaysofweek.SellingTitleDaysOfWeekSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekName\",sellingtitledaysofweek.SellingTitleDaysOfWeekName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@Mon\",sellingtitledaysofweek.Mon, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Tue\",sellingtitledaysofweek.Tue, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Wed\",sellingtitledaysofweek.Wed, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Thu\",sellingtitledaysofweek.Thu, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Fri\",sellingtitledaysofweek.Fri, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Sat\",sellingtitledaysofweek.Sat, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Sun\",sellingtitledaysofweek.Sun, DbType.Boolean);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDaysOfWeekAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryPeriodAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventoryperiod",
                      "Type": "SellableInventoryPeriod",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventoryperiod.SellableInventoryPeriodHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodSqn\",sellableinventoryperiod.SellableInventoryPeriodSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodName\",sellableinventoryperiod.SellableInventoryPeriodName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodStartDate\",sellableinventoryperiod.SellableInventoryPeriodStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodEndDate\",sellableinventoryperiod.SellableInventoryPeriodEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryPeriodAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<bool>",
                  "ReferencesType": null,
                  "MethodName": "SellableInventoryAddUpdate",
                  "Parameter": [
                    {
                      "ParameterName": "sellableinventory",
                      "Type": "SellableInventory",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryHashKey\",sellableinventory.SellableInventoryHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventorySqn\",sellableinventory.SellableInventorySqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",sellableinventory.StationHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",sellableinventory.StationGroupHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",sellableinventory.RateCardHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",sellableinventory.RateCardDaypartHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",sellableinventory.RateCardTypeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellableinventory.SellingTitleHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellableinventory.SellingTitleDaysOfWeekHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellableinventory.SellingTitleTimeRangeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventory.SellableInventoryPeriodHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<IList<RateCard>>",
                  "ReferencesType": null,
                  "MethodName": "GetRateCardsByStation",
                  "Parameter": [
                    {
                      "ParameterName": "stationhashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",stationhashkey, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<RateCard>(\r\n\t\t\t\t     \"SIMApi.GetRateCardsByStation\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<IList<RateCard>>",
                  "ReferencesType": null,
                  "MethodName": "GetRateCardsByDateRange",
                  "Parameter": [
                    {
                      "ParameterName": "startdate",
                      "Type": "System.DateTime",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "enddate",
                      "Type": "System.DateTime",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StartDate\",startdate, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@EndDate\",enddate, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<RateCard>(\r\n\t\t\t\t     \"SIMApi.GetRateCardsByDateRange\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
                },
                {
                  "AccessModifier": 0,
                  "SignatureOnly": false,
                  "IsOverride": false,
                  "IsAbstract": false,
                  "IsStatic": false,
                  "IsAsync": true,
                  "IsExtensionMethod": false,
                  "ReturnType": "Task<IList<SellableInventoryDto>>",
                  "ReferencesType": null,
                  "MethodName": "GetConfirmedInventory",
                  "Parameter": [
                    {
                      "ParameterName": "stationlist",
                      "Type": "object",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "ratecardtypehashkey",
                      "Type": "System.String",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "ratecarddaypartlist",
                      "Type": "object",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "sellingtitlelist",
                      "Type": "object",
                      "PassToBaseClass": false
                    },
                    {
                      "ParameterName": "broadcastweeklist",
                      "Type": "object",
                      "PassToBaseClass": false
                    }
                  ],
                  "CodeSnippetFile": null,
                  "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationList\",stationlist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtypehashkey, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartList\",ratecarddaypartlist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleList\",sellingtitlelist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@BroadcastWeekList\",broadcastweeklist, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<SellableInventoryDto>(\r\n\t\t\t\t     \"SIMApi.GetConfirmedInventory\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
                }
              ],
              "Property": [],
              "Field": [
                {
                  "AccessModifier": 2,
                  "FieldName": "DefaultPageNumber",
                  "FieldType": "int",
                  "ReferencesType": null,
                  "IsReadonly": false,
                  "IsConst": false,
                  "IsStatic": false
                },
                {
                  "AccessModifier": 2,
                  "FieldName": "DefaultPageSize",
                  "FieldType": "int",
                  "ReferencesType": null,
                  "IsReadonly": false,
                  "IsConst": false,
                  "IsStatic": false
                }
              ],
              "InheritsFrom": {
                "NamespaceRef": [],
                "AccessModifier": 0,
                "IsAbstract": false,
                "Namespace": null,
                "IsStatic": false,
                "ClassName": "BaseDataService",
                "Constructor": [],
                "Method": [],
                "Property": [],
                "Field": [],
                "InheritsFrom": null,
                "Implements": []
              },
              "Implements": [
                {
                  "InterfaceName": "ISellableInventoryMartDataService",
                  "Namespace": null,
                  "Method": [],
                  "NamespaceRef": [],
                  "InheritsFrom": null,
                  "IsGeneric": false
                }
              ]
            },
            "AssemblyInfo": null,
            "File": {
              "FileName": "SellableInventoryMartDataService.cs",
              "Folder": "DataServices",
              "Path": "DataServices\\SellableInventoryMartDataService.cs",
              "WrittenToPath": null
            },
            "BuildAction": 3
          }
        ],
        "Class": [
          {
            "NamespaceRef": [
              {
                "ReferenceTo": {
                  "NamespaceName": "System.Data"
                }
              },
              {
                "ReferenceTo": {
                  "NamespaceName": "System.Data.SqlClient"
                }
              }
            ],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "SellableInventoryMartDbProvider",
            "Constructor": [
              {
                "AccessModifier": 0,
                "ConstructorName": "SellableInventoryMartDbProvider",
                "Parameter": [
                  {
                    "ParameterName": "connectionString",
                    "Type": "string",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "  if (string.IsNullOrWhiteSpace(connectionString))\r\n            {\r\n                throw new ArgumentException(\"Connection string cannot be null or empty.\", nameof(connectionString));\r\n            }\r\n\r\n            _connectionString = connectionString;\r\n            "
              }
            ],
            "Method": [
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "IDbConnection",
                "ReferencesType": null,
                "MethodName": "GetConnection",
                "Parameter": [],
                "CodeSnippetFile": null,
                "CodeSnippet": "return new SqlConnection(_connectionString);"
              }
            ],
            "Property": [],
            "Field": [
              {
                "AccessModifier": 2,
                "FieldName": "_connectionString",
                "FieldType": "string",
                "ReferencesType": null,
                "IsReadonly": true,
                "IsConst": false,
                "IsStatic": false
              }
            ],
            "InheritsFrom": null,
            "Implements": [
              {
                "InterfaceName": "ISellableInventoryMartDbProvider",
                "Namespace": {
                  "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
                },
                "Method": [
                  {
                    "AccessModifier": 0,
                    "SignatureOnly": true,
                    "IsOverride": false,
                    "IsAbstract": false,
                    "IsStatic": false,
                    "IsAsync": false,
                    "IsExtensionMethod": false,
                    "ReturnType": "IDbConnection",
                    "ReferencesType": null,
                    "MethodName": "GetConnection",
                    "Parameter": [],
                    "CodeSnippetFile": null,
                    "CodeSnippet": null
                  }
                ],
                "NamespaceRef": [
                  {
                    "ReferenceTo": {
                      "NamespaceName": "System.Data"
                    }
                  },
                  {
                    "ReferenceTo": {
                      "NamespaceName": "System.Data.SqlClient"
                    }
                  }
                ],
                "InheritsFrom": null,
                "IsGeneric": false
              }
            ]
          },
          {
            "NamespaceRef": [],
            "AccessModifier": 0,
            "IsAbstract": true,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "BaseDataService",
            "Constructor": [
              {
                "AccessModifier": 1,
                "ConstructorName": "BaseDataService",
                "Parameter": [
                  {
                    "ParameterName": "dbProvider",
                    "Type": "ISellableInventoryMartDbProvider",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "DbProvider = dbProvider ?? throw new ArgumentException(nameof(dbProvider));"
              }
            ],
            "Method": [],
            "Property": [],
            "Field": [
              {
                "AccessModifier": 1,
                "FieldName": "DbProvider",
                "FieldType": "ISellableInventoryMartDbProvider",
                "ReferencesType": null,
                "IsReadonly": true,
                "IsConst": false,
                "IsStatic": false
              }
            ],
            "InheritsFrom": null,
            "Implements": []
          },
          {
            "NamespaceRef": [],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "SellingTitle",
            "Constructor": [],
            "Method": [],
            "Property": [
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleSqn",
                "Type": "Int32",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleStartDate",
                "Type": "DateTime",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleEndDate",
                "Type": "DateTime",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              }
            ],
            "Field": [],
            "InheritsFrom": null,
            "Implements": []
          },
          {
            "NamespaceRef": [],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "Station",
            "Constructor": [],
            "Method": [],
            "Property": [
              {
                "AccessModifier": 0,
                "PropertyName": "StationHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "StationSqn",
                "Type": "Int32",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "StationName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              },
              {
                "AccessModifier": 0,
                "PropertyName": "StationCallLetters",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 10
              }
            ],
            "Field": [],
            "InheritsFrom": null,
            "Implements": []
          },
          {
            "NamespaceRef": [],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "StationGroup",
            "Constructor": [],
            "Method": [],
            "Property": [
              {
                "AccessModifier": 0,
                "PropertyName": "StationGroupHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "StationGroupSqn",
                "Type": "Int32",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "StationGroupName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              }
            ],
            "Field": [],
            "InheritsFrom": null,
            "Implements": []
          },
          {
            "NamespaceRef": [],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "RateCard",
            "Constructor": [],
            "Method": [],
            "Property": [
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardSqn",
                "Type": "Int32",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardStartDate",
                "Type": "DateTime",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardEndDate",
                "Type": "DateTime",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              }
            ],
            "Field": [],
            "InheritsFrom": null,
            "Implements": []
          },
          {
            "NamespaceRef": [],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "RateCardDaypart",
            "Constructor": [],
            "Method": [],
            "Property": [
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardDaypartHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardDaypartSqn",
                "Type": "Int32",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardDaypartName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              }
            ],
            "Field": [],
            "InheritsFrom": null,
            "Implements": []
          },
          {
            "NamespaceRef": [],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "RateCardType",
            "Constructor": [],
            "Method": [],
            "Property": [
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardTypeHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardTypeSqn",
                "Type": "Int32",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardTypeName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              }
            ],
            "Field": [],
            "InheritsFrom": null,
            "Implements": []
          },
          {
            "NamespaceRef": [],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "SellingTitleTimeRange",
            "Constructor": [],
            "Method": [],
            "Property": [
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleTimeRangeHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "TimeRangeSqn",
                "Type": "Int32",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleTimeRangeName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              }
            ],
            "Field": [],
            "InheritsFrom": null,
            "Implements": []
          },
          {
            "NamespaceRef": [],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "SellingTitleDaysOfWeek",
            "Constructor": [],
            "Method": [],
            "Property": [
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleDaysOfWeekHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleDaysOfWeekSqn",
                "Type": "Int32",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleDaysOfWeekName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              },
              {
                "AccessModifier": 0,
                "PropertyName": "Mon",
                "Type": "Boolean",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "Tue",
                "Type": "Boolean",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "Wed",
                "Type": "Boolean",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "Thu",
                "Type": "Boolean",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "Fri",
                "Type": "Boolean",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "Sat",
                "Type": "Boolean",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "Sun",
                "Type": "Boolean",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              }
            ],
            "Field": [],
            "InheritsFrom": null,
            "Implements": []
          },
          {
            "NamespaceRef": [],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "SellableInventoryPeriod",
            "Constructor": [],
            "Method": [],
            "Property": [
              {
                "AccessModifier": 0,
                "PropertyName": "SellableInventoryPeriodHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellableInventoryPeriodSqn",
                "Type": "Int32",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellableInventoryPeriodName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellableInventoryPeriodStartDate",
                "Type": "DateTime",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellableInventoryPeriodEndDate",
                "Type": "DateTime",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              }
            ],
            "Field": [],
            "InheritsFrom": null,
            "Implements": []
          },
          {
            "NamespaceRef": [],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "SellableInventory",
            "Constructor": [],
            "Method": [],
            "Property": [
              {
                "AccessModifier": 0,
                "PropertyName": "SellableInventoryHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellableInventorySqn",
                "Type": "Int32",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": -1
              },
              {
                "AccessModifier": 0,
                "PropertyName": "StationHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "StationGroupHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardDaypartHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardTypeHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleDaysOfWeekHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleTimeRangeHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellableInventoryPeriodHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              }
            ],
            "Field": [],
            "InheritsFrom": null,
            "Implements": []
          },
          {
            "NamespaceRef": [],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "SellableInventoryDto",
            "Constructor": [],
            "Method": [],
            "Property": [
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleStartDate",
                "Type": "DateTime",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 8
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleEndDate",
                "Type": "DateTime",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 8
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardDaypartName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleDaysOfWeekName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardTypeName",
                "Type": "String",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 255
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellableInventoryHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "StationHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "SellingTitleDaysOfWeekHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              },
              {
                "AccessModifier": 0,
                "PropertyName": "RateCardTypeHashKey",
                "Type": "Char[]",
                "ReferencesType": null,
                "DefaultValue": null,
                "MaxLength": 32
              }
            ],
            "Field": [],
            "InheritsFrom": null,
            "Implements": []
          },
          {
            "NamespaceRef": [
              {
                "ReferenceTo": {
                  "NamespaceName": "System.Linq"
                }
              },
              {
                "ReferenceTo": {
                  "NamespaceName": "System.Collections.Generic"
                }
              },
              {
                "ReferenceTo": {
                  "NamespaceName": "System.Threading.Tasks"
                }
              },
              {
                "ReferenceTo": {
                  "NamespaceName": "Dapper"
                }
              },
              {
                "ReferenceTo": {
                  "NamespaceName": "System.Data"
                }
              },
              {
                "ReferenceTo": {
                  "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
                }
              }
            ],
            "AccessModifier": 0,
            "IsAbstract": false,
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "IsStatic": false,
            "ClassName": "SellableInventoryMartDataService",
            "Constructor": [
              {
                "AccessModifier": 0,
                "ConstructorName": "SellableInventoryMartDataService",
                "Parameter": [
                  {
                    "ParameterName": "dbProvider",
                    "Type": "ISellableInventoryMartDbProvider",
                    "PassToBaseClass": true
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "//empty constructor"
              }
            ],
            "Method": [
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellingTitleDelete",
                "Parameter": [
                  {
                    "ParameterName": "sellingtitlehashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellingtitlehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "StationDelete",
                "Parameter": [
                  {
                    "ParameterName": "stationhashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",stationhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "StationGroupDelete",
                "Parameter": [
                  {
                    "ParameterName": "stationgrouphashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",stationgrouphashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationGroupDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "RateCardDelete",
                "Parameter": [
                  {
                    "ParameterName": "ratecardhashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",ratecardhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "RateCardDaypartDelete",
                "Parameter": [
                  {
                    "ParameterName": "ratecarddayparthashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",ratecarddayparthashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDaypartDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "RateCardTypeDelete",
                "Parameter": [
                  {
                    "ParameterName": "ratecardtypehashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtypehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardTypeDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellingTitleTimeRangeDelete",
                "Parameter": [
                  {
                    "ParameterName": "sellingtitletimerangehashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellingtitletimerangehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleTimeRangeDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellingTitleDaysOfWeekDelete",
                "Parameter": [
                  {
                    "ParameterName": "sellingtitledaysofweekhashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellingtitledaysofweekhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDaysOfWeekDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellableInventoryPeriodDelete",
                "Parameter": [
                  {
                    "ParameterName": "sellableinventoryperiodhashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventoryperiodhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryPeriodDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellableInventoryDelete",
                "Parameter": [
                  {
                    "ParameterName": "sellableinventoryhashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryHashKey\",sellableinventoryhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellingTitleAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "sellingtitle",
                    "Type": "SellingTitle",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellingtitle.SellingTitleHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleSqn\",sellingtitle.SellingTitleSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleName\",sellingtitle.SellingTitleName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleStartDate\",sellingtitle.SellingTitleStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleEndDate\",sellingtitle.SellingTitleEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "StationAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "station",
                    "Type": "Station",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",station.StationHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationSqn\",station.StationSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationName\",station.StationName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@StationCallLetters\",station.StationCallLetters, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "StationGroupAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "stationgroup",
                    "Type": "StationGroup",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",stationgroup.StationGroupHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupSqn\",stationgroup.StationGroupSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupName\",stationgroup.StationGroupName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationGroupAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "RateCardAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "ratecard",
                    "Type": "RateCard",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",ratecard.RateCardHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardSqn\",ratecard.RateCardSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardName\",ratecard.RateCardName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@RateCardStartDate\",ratecard.RateCardStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@RateCardEndDate\",ratecard.RateCardEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "RateCardDaypartAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "ratecarddaypart",
                    "Type": "RateCardDaypart",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",ratecarddaypart.RateCardDaypartHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartSqn\",ratecarddaypart.RateCardDaypartSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartName\",ratecarddaypart.RateCardDaypartName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDaypartAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "RateCardTypeAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "ratecardtype",
                    "Type": "RateCardType",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtype.RateCardTypeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeSqn\",ratecardtype.RateCardTypeSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeName\",ratecardtype.RateCardTypeName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardTypeAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellingTitleTimeRangeAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "sellingtitletimerange",
                    "Type": "SellingTitleTimeRange",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellingtitletimerange.SellingTitleTimeRangeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@TimeRangeSqn\",sellingtitletimerange.TimeRangeSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeName\",sellingtitletimerange.SellingTitleTimeRangeName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleTimeRangeAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellingTitleDaysOfWeekAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "sellingtitledaysofweek",
                    "Type": "SellingTitleDaysOfWeek",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellingtitledaysofweek.SellingTitleDaysOfWeekHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekSqn\",sellingtitledaysofweek.SellingTitleDaysOfWeekSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekName\",sellingtitledaysofweek.SellingTitleDaysOfWeekName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@Mon\",sellingtitledaysofweek.Mon, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Tue\",sellingtitledaysofweek.Tue, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Wed\",sellingtitledaysofweek.Wed, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Thu\",sellingtitledaysofweek.Thu, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Fri\",sellingtitledaysofweek.Fri, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Sat\",sellingtitledaysofweek.Sat, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Sun\",sellingtitledaysofweek.Sun, DbType.Boolean);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDaysOfWeekAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellableInventoryPeriodAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "sellableinventoryperiod",
                    "Type": "SellableInventoryPeriod",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventoryperiod.SellableInventoryPeriodHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodSqn\",sellableinventoryperiod.SellableInventoryPeriodSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodName\",sellableinventoryperiod.SellableInventoryPeriodName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodStartDate\",sellableinventoryperiod.SellableInventoryPeriodStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodEndDate\",sellableinventoryperiod.SellableInventoryPeriodEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryPeriodAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellableInventoryAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "sellableinventory",
                    "Type": "SellableInventory",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryHashKey\",sellableinventory.SellableInventoryHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventorySqn\",sellableinventory.SellableInventorySqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",sellableinventory.StationHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",sellableinventory.StationGroupHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",sellableinventory.RateCardHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",sellableinventory.RateCardDaypartHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",sellableinventory.RateCardTypeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellableinventory.SellingTitleHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellableinventory.SellingTitleDaysOfWeekHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellableinventory.SellingTitleTimeRangeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventory.SellableInventoryPeriodHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<IList<RateCard>>",
                "ReferencesType": null,
                "MethodName": "GetRateCardsByStation",
                "Parameter": [
                  {
                    "ParameterName": "stationhashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",stationhashkey, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<RateCard>(\r\n\t\t\t\t     \"SIMApi.GetRateCardsByStation\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<IList<RateCard>>",
                "ReferencesType": null,
                "MethodName": "GetRateCardsByDateRange",
                "Parameter": [
                  {
                    "ParameterName": "startdate",
                    "Type": "System.DateTime",
                    "PassToBaseClass": false
                  },
                  {
                    "ParameterName": "enddate",
                    "Type": "System.DateTime",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StartDate\",startdate, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@EndDate\",enddate, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<RateCard>(\r\n\t\t\t\t     \"SIMApi.GetRateCardsByDateRange\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": false,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": true,
                "IsExtensionMethod": false,
                "ReturnType": "Task<IList<SellableInventoryDto>>",
                "ReferencesType": null,
                "MethodName": "GetConfirmedInventory",
                "Parameter": [
                  {
                    "ParameterName": "stationlist",
                    "Type": "object",
                    "PassToBaseClass": false
                  },
                  {
                    "ParameterName": "ratecardtypehashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  },
                  {
                    "ParameterName": "ratecarddaypartlist",
                    "Type": "object",
                    "PassToBaseClass": false
                  },
                  {
                    "ParameterName": "sellingtitlelist",
                    "Type": "object",
                    "PassToBaseClass": false
                  },
                  {
                    "ParameterName": "broadcastweeklist",
                    "Type": "object",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationList\",stationlist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtypehashkey, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartList\",ratecarddaypartlist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleList\",sellingtitlelist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@BroadcastWeekList\",broadcastweeklist, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<SellableInventoryDto>(\r\n\t\t\t\t     \"SIMApi.GetConfirmedInventory\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
              }
            ],
            "Property": [],
            "Field": [
              {
                "AccessModifier": 2,
                "FieldName": "DefaultPageNumber",
                "FieldType": "int",
                "ReferencesType": null,
                "IsReadonly": false,
                "IsConst": false,
                "IsStatic": false
              },
              {
                "AccessModifier": 2,
                "FieldName": "DefaultPageSize",
                "FieldType": "int",
                "ReferencesType": null,
                "IsReadonly": false,
                "IsConst": false,
                "IsStatic": false
              }
            ],
            "InheritsFrom": {
              "NamespaceRef": [],
              "AccessModifier": 0,
              "IsAbstract": false,
              "Namespace": null,
              "IsStatic": false,
              "ClassName": "BaseDataService",
              "Constructor": [],
              "Method": [],
              "Property": [],
              "Field": [],
              "InheritsFrom": null,
              "Implements": []
            },
            "Implements": [
              {
                "InterfaceName": "ISellableInventoryMartDataService",
                "Namespace": null,
                "Method": [],
                "NamespaceRef": [],
                "InheritsFrom": null,
                "IsGeneric": false
              }
            ]
          }
        ],
        "Interface": [
          {
            "InterfaceName": "ISellableInventoryMartDbProvider",
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "Method": [
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "IDbConnection",
                "ReferencesType": null,
                "MethodName": "GetConnection",
                "Parameter": [],
                "CodeSnippetFile": null,
                "CodeSnippet": null
              }
            ],
            "NamespaceRef": [
              {
                "ReferenceTo": {
                  "NamespaceName": "System.Data"
                }
              },
              {
                "ReferenceTo": {
                  "NamespaceName": "System.Data.SqlClient"
                }
              }
            ],
            "InheritsFrom": null,
            "IsGeneric": false
          },
          {
            "InterfaceName": "ISellableInventoryMartDataService",
            "Namespace": {
              "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
            },
            "Method": [
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellingTitleDelete",
                "Parameter": [
                  {
                    "ParameterName": "sellingtitlehashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellingtitlehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "StationDelete",
                "Parameter": [
                  {
                    "ParameterName": "stationhashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",stationhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "StationGroupDelete",
                "Parameter": [
                  {
                    "ParameterName": "stationgrouphashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",stationgrouphashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationGroupDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "RateCardDelete",
                "Parameter": [
                  {
                    "ParameterName": "ratecardhashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",ratecardhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "RateCardDaypartDelete",
                "Parameter": [
                  {
                    "ParameterName": "ratecarddayparthashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",ratecarddayparthashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDaypartDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "RateCardTypeDelete",
                "Parameter": [
                  {
                    "ParameterName": "ratecardtypehashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtypehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardTypeDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellingTitleTimeRangeDelete",
                "Parameter": [
                  {
                    "ParameterName": "sellingtitletimerangehashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellingtitletimerangehashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleTimeRangeDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellingTitleDaysOfWeekDelete",
                "Parameter": [
                  {
                    "ParameterName": "sellingtitledaysofweekhashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellingtitledaysofweekhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDaysOfWeekDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellableInventoryPeriodDelete",
                "Parameter": [
                  {
                    "ParameterName": "sellableinventoryperiodhashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventoryperiodhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryPeriodDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellableInventoryDelete",
                "Parameter": [
                  {
                    "ParameterName": "sellableinventoryhashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryHashKey\",sellableinventoryhashkey, DbType.StringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryDelete\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellingTitleAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "sellingtitle",
                    "Type": "SellingTitle",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellingtitle.SellingTitleHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleSqn\",sellingtitle.SellingTitleSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleName\",sellingtitle.SellingTitleName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleStartDate\",sellingtitle.SellingTitleStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleEndDate\",sellingtitle.SellingTitleEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "StationAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "station",
                    "Type": "Station",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",station.StationHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationSqn\",station.StationSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationName\",station.StationName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@StationCallLetters\",station.StationCallLetters, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "StationGroupAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "stationgroup",
                    "Type": "StationGroup",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",stationgroup.StationGroupHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupSqn\",stationgroup.StationGroupSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupName\",stationgroup.StationGroupName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.StationGroupAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "RateCardAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "ratecard",
                    "Type": "RateCard",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",ratecard.RateCardHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardSqn\",ratecard.RateCardSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardName\",ratecard.RateCardName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@RateCardStartDate\",ratecard.RateCardStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@RateCardEndDate\",ratecard.RateCardEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "RateCardDaypartAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "ratecarddaypart",
                    "Type": "RateCardDaypart",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",ratecarddaypart.RateCardDaypartHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartSqn\",ratecarddaypart.RateCardDaypartSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartName\",ratecarddaypart.RateCardDaypartName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardDaypartAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "RateCardTypeAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "ratecardtype",
                    "Type": "RateCardType",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtype.RateCardTypeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeSqn\",ratecardtype.RateCardTypeSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeName\",ratecardtype.RateCardTypeName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.RateCardTypeAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellingTitleTimeRangeAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "sellingtitletimerange",
                    "Type": "SellingTitleTimeRange",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellingtitletimerange.SellingTitleTimeRangeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@TimeRangeSqn\",sellingtitletimerange.TimeRangeSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeName\",sellingtitletimerange.SellingTitleTimeRangeName, DbType.AnsiString);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleTimeRangeAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellingTitleDaysOfWeekAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "sellingtitledaysofweek",
                    "Type": "SellingTitleDaysOfWeek",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellingtitledaysofweek.SellingTitleDaysOfWeekHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekSqn\",sellingtitledaysofweek.SellingTitleDaysOfWeekSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekName\",sellingtitledaysofweek.SellingTitleDaysOfWeekName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@Mon\",sellingtitledaysofweek.Mon, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Tue\",sellingtitledaysofweek.Tue, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Wed\",sellingtitledaysofweek.Wed, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Thu\",sellingtitledaysofweek.Thu, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Fri\",sellingtitledaysofweek.Fri, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Sat\",sellingtitledaysofweek.Sat, DbType.Boolean);\r\n\t\t\t\tsqlParams.Add(\"@Sun\",sellingtitledaysofweek.Sun, DbType.Boolean);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellingTitleDaysOfWeekAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellableInventoryPeriodAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "sellableinventoryperiod",
                    "Type": "SellableInventoryPeriod",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventoryperiod.SellableInventoryPeriodHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodSqn\",sellableinventoryperiod.SellableInventoryPeriodSqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodName\",sellableinventoryperiod.SellableInventoryPeriodName, DbType.AnsiString);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodStartDate\",sellableinventoryperiod.SellableInventoryPeriodStartDate, DbType.DateTime);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodEndDate\",sellableinventoryperiod.SellableInventoryPeriodEndDate, DbType.DateTime);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryPeriodAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<bool>",
                "ReferencesType": null,
                "MethodName": "SellableInventoryAddUpdate",
                "Parameter": [
                  {
                    "ParameterName": "sellableinventory",
                    "Type": "SellableInventory",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryHashKey\",sellableinventory.SellableInventoryHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventorySqn\",sellableinventory.SellableInventorySqn, DbType.Int32);\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",sellableinventory.StationHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@StationGroupHashKey\",sellableinventory.StationGroupHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardHashKey\",sellableinventory.RateCardHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartHashKey\",sellableinventory.RateCardDaypartHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",sellableinventory.RateCardTypeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleHashKey\",sellableinventory.SellingTitleHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleDaysOfWeekHashKey\",sellableinventory.SellingTitleDaysOfWeekHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleTimeRangeHashKey\",sellableinventory.SellingTitleTimeRangeHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\tsqlParams.Add(\"@SellableInventoryPeriodHashKey\",sellableinventory.SellableInventoryPeriodHashKey, DbType.AnsiStringFixedLength);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .ExecuteAsync(\r\n\t\t\t\t     \"SIMApi.SellableInventoryAddUpdate\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result > 0;\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<IList<RateCard>>",
                "ReferencesType": null,
                "MethodName": "GetRateCardsByStation",
                "Parameter": [
                  {
                    "ParameterName": "stationhashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationHashKey\",stationhashkey, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<RateCard>(\r\n\t\t\t\t     \"SIMApi.GetRateCardsByStation\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<IList<RateCard>>",
                "ReferencesType": null,
                "MethodName": "GetRateCardsByDateRange",
                "Parameter": [
                  {
                    "ParameterName": "startdate",
                    "Type": "System.DateTime",
                    "PassToBaseClass": false
                  },
                  {
                    "ParameterName": "enddate",
                    "Type": "System.DateTime",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StartDate\",startdate, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@EndDate\",enddate, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<RateCard>(\r\n\t\t\t\t     \"SIMApi.GetRateCardsByDateRange\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
              },
              {
                "AccessModifier": 0,
                "SignatureOnly": true,
                "IsOverride": false,
                "IsAbstract": false,
                "IsStatic": false,
                "IsAsync": false,
                "IsExtensionMethod": false,
                "ReturnType": "Task<IList<SellableInventoryDto>>",
                "ReferencesType": null,
                "MethodName": "GetConfirmedInventory",
                "Parameter": [
                  {
                    "ParameterName": "stationlist",
                    "Type": "object",
                    "PassToBaseClass": false
                  },
                  {
                    "ParameterName": "ratecardtypehashkey",
                    "Type": "System.String",
                    "PassToBaseClass": false
                  },
                  {
                    "ParameterName": "ratecarddaypartlist",
                    "Type": "object",
                    "PassToBaseClass": false
                  },
                  {
                    "ParameterName": "sellingtitlelist",
                    "Type": "object",
                    "PassToBaseClass": false
                  },
                  {
                    "ParameterName": "broadcastweeklist",
                    "Type": "object",
                    "PassToBaseClass": false
                  }
                ],
                "CodeSnippetFile": null,
                "CodeSnippet": "using (var connection = DbProvider.GetConnection())\r\n\t\t\t{\r\n\t\t\t\tvar sqlParams = new DynamicParameters();\r\n\t\t\t\tsqlParams.Add(\"@StationList\",stationlist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@RateCardTypeHashKey\",ratecardtypehashkey, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@RateCardDaypartList\",ratecarddaypartlist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@SellingTitleList\",sellingtitlelist, DbType.String);\r\n\t\t\t\tsqlParams.Add(\"@BroadcastWeekList\",broadcastweeklist, DbType.String);\r\n\t\t\t\t\r\n\t\t\t\tvar result = await connection\r\n\t\t\t\t     .QueryAsync<SellableInventoryDto>(\r\n\t\t\t\t     \"SIMApi.GetConfirmedInventory\",\r\n\t\t\t\t        sqlParams,\r\n\t\t\t\t        commandType: CommandType.StoredProcedure)\r\n\t\t\t\t     .ConfigureAwait(false);\r\n\t\t\t\t\r\n\t\t\t\treturn result.ToList();\r\n\t\t\t}\r\n"
              }
            ],
            "NamespaceRef": [
              {
                "ReferenceTo": {
                  "NamespaceName": "System.Data"
                }
              },
              {
                "ReferenceTo": {
                  "NamespaceName": "System.Data.SqlClient"
                }
              },
              {
                "ReferenceTo": {
                  "NamespaceName": "System.Collections.Generic"
                }
              },
              {
                "ReferenceTo": {
                  "NamespaceName": "System.Threading.Tasks"
                }
              },
              {
                "ReferenceTo": {
                  "NamespaceName": "Videa.SellableInventoryMartNS.Data.DataServices"
                }
              }
            ],
            "InheritsFrom": null,
            "IsGeneric": false
          }
        ],
        "Path": null,
        "DefaultNamespace": null,
        "AssemblyName": "Videa.SellableInventoryMart.Data",
        "ProjectReference": [],
        "NuGetReference": [
          {
            "NuGetName": "Dapper",
            "Version": "1.50.2"
          }
        ],
        "PostBuildEventStep": []
      }
    ],
    "NuGetReference": [],
    "PostBuildEventStep": []
  }
}